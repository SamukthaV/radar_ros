// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdk_SensorMsgHeader.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pdk_5fSensorMsgHeader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pdk_5fSensorMsgHeader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pdk_MsgHeader.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pdk_5fSensorMsgHeader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pdk_5fSensorMsgHeader_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pdk_5fSensorMsgHeader_2eproto;
namespace pb {
namespace PDK {
class SensorMsgHeader;
struct SensorMsgHeaderDefaultTypeInternal;
extern SensorMsgHeaderDefaultTypeInternal _SensorMsgHeader_default_instance_;
}  // namespace PDK
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::PDK::SensorMsgHeader* Arena::CreateMaybeMessage<::pb::PDK::SensorMsgHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace PDK {

enum SensorMsgHeader_SignalStatus : int {
  SensorMsgHeader_SignalStatus_EM_SIGSTATE_INIT = 0,
  SensorMsgHeader_SignalStatus_EM_SIGSTATE_OK = 1,
  SensorMsgHeader_SignalStatus_EM_SIGSTATE_INVALID = 2
};
bool SensorMsgHeader_SignalStatus_IsValid(int value);
constexpr SensorMsgHeader_SignalStatus SensorMsgHeader_SignalStatus_SignalStatus_MIN = SensorMsgHeader_SignalStatus_EM_SIGSTATE_INIT;
constexpr SensorMsgHeader_SignalStatus SensorMsgHeader_SignalStatus_SignalStatus_MAX = SensorMsgHeader_SignalStatus_EM_SIGSTATE_INVALID;
constexpr int SensorMsgHeader_SignalStatus_SignalStatus_ARRAYSIZE = SensorMsgHeader_SignalStatus_SignalStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorMsgHeader_SignalStatus_descriptor();
template<typename T>
inline const std::string& SensorMsgHeader_SignalStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SensorMsgHeader_SignalStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SensorMsgHeader_SignalStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SensorMsgHeader_SignalStatus_descriptor(), enum_t_value);
}
inline bool SensorMsgHeader_SignalStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SensorMsgHeader_SignalStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SensorMsgHeader_SignalStatus>(
    SensorMsgHeader_SignalStatus_descriptor(), name, value);
}
enum SensorMsgHeader_SensorType : int {
  SensorMsgHeader_SensorType_ARS430EO = 0,
  SensorMsgHeader_SensorType_ARS430DI = 1,
  SensorMsgHeader_SensorType_SRR520CO = 3,
  SensorMsgHeader_SensorType_ARS540DEMO = 4,
  SensorMsgHeader_SensorType_SRR520DI = 5,
  SensorMsgHeader_SensorType_ARS548 = 6,
  SensorMsgHeader_SensorType_UNKNOWN = 99
};
bool SensorMsgHeader_SensorType_IsValid(int value);
constexpr SensorMsgHeader_SensorType SensorMsgHeader_SensorType_SensorType_MIN = SensorMsgHeader_SensorType_ARS430EO;
constexpr SensorMsgHeader_SensorType SensorMsgHeader_SensorType_SensorType_MAX = SensorMsgHeader_SensorType_UNKNOWN;
constexpr int SensorMsgHeader_SensorType_SensorType_ARRAYSIZE = SensorMsgHeader_SensorType_SensorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorMsgHeader_SensorType_descriptor();
template<typename T>
inline const std::string& SensorMsgHeader_SensorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SensorMsgHeader_SensorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SensorMsgHeader_SensorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SensorMsgHeader_SensorType_descriptor(), enum_t_value);
}
inline bool SensorMsgHeader_SensorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SensorMsgHeader_SensorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SensorMsgHeader_SensorType>(
    SensorMsgHeader_SensorType_descriptor(), name, value);
}
// ===================================================================

class SensorMsgHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PDK.SensorMsgHeader) */ {
 public:
  inline SensorMsgHeader() : SensorMsgHeader(nullptr) {}
  ~SensorMsgHeader() override;
  explicit PROTOBUF_CONSTEXPR SensorMsgHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SensorMsgHeader(const SensorMsgHeader& from);
  SensorMsgHeader(SensorMsgHeader&& from) noexcept
    : SensorMsgHeader() {
    *this = ::std::move(from);
  }

  inline SensorMsgHeader& operator=(const SensorMsgHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorMsgHeader& operator=(SensorMsgHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorMsgHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const SensorMsgHeader* internal_default_instance() {
    return reinterpret_cast<const SensorMsgHeader*>(
               &_SensorMsgHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SensorMsgHeader& a, SensorMsgHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorMsgHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorMsgHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SensorMsgHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SensorMsgHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SensorMsgHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SensorMsgHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorMsgHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PDK.SensorMsgHeader";
  }
  protected:
  explicit SensorMsgHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SensorMsgHeader_SignalStatus SignalStatus;
  static constexpr SignalStatus EM_SIGSTATE_INIT =
    SensorMsgHeader_SignalStatus_EM_SIGSTATE_INIT;
  static constexpr SignalStatus EM_SIGSTATE_OK =
    SensorMsgHeader_SignalStatus_EM_SIGSTATE_OK;
  static constexpr SignalStatus EM_SIGSTATE_INVALID =
    SensorMsgHeader_SignalStatus_EM_SIGSTATE_INVALID;
  static inline bool SignalStatus_IsValid(int value) {
    return SensorMsgHeader_SignalStatus_IsValid(value);
  }
  static constexpr SignalStatus SignalStatus_MIN =
    SensorMsgHeader_SignalStatus_SignalStatus_MIN;
  static constexpr SignalStatus SignalStatus_MAX =
    SensorMsgHeader_SignalStatus_SignalStatus_MAX;
  static constexpr int SignalStatus_ARRAYSIZE =
    SensorMsgHeader_SignalStatus_SignalStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SignalStatus_descriptor() {
    return SensorMsgHeader_SignalStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& SignalStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SignalStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SignalStatus_Name.");
    return SensorMsgHeader_SignalStatus_Name(enum_t_value);
  }
  static inline bool SignalStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SignalStatus* value) {
    return SensorMsgHeader_SignalStatus_Parse(name, value);
  }

  typedef SensorMsgHeader_SensorType SensorType;
  static constexpr SensorType ARS430EO =
    SensorMsgHeader_SensorType_ARS430EO;
  static constexpr SensorType ARS430DI =
    SensorMsgHeader_SensorType_ARS430DI;
  static constexpr SensorType SRR520CO =
    SensorMsgHeader_SensorType_SRR520CO;
  static constexpr SensorType ARS540DEMO =
    SensorMsgHeader_SensorType_ARS540DEMO;
  static constexpr SensorType SRR520DI =
    SensorMsgHeader_SensorType_SRR520DI;
  static constexpr SensorType ARS548 =
    SensorMsgHeader_SensorType_ARS548;
  static constexpr SensorType UNKNOWN =
    SensorMsgHeader_SensorType_UNKNOWN;
  static inline bool SensorType_IsValid(int value) {
    return SensorMsgHeader_SensorType_IsValid(value);
  }
  static constexpr SensorType SensorType_MIN =
    SensorMsgHeader_SensorType_SensorType_MIN;
  static constexpr SensorType SensorType_MAX =
    SensorMsgHeader_SensorType_SensorType_MAX;
  static constexpr int SensorType_ARRAYSIZE =
    SensorMsgHeader_SensorType_SensorType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SensorType_descriptor() {
    return SensorMsgHeader_SensorType_descriptor();
  }
  template<typename T>
  static inline const std::string& SensorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SensorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SensorType_Name.");
    return SensorMsgHeader_SensorType_Name(enum_t_value);
  }
  static inline bool SensorType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SensorType* value) {
    return SensorMsgHeader_SensorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTCommonHeaderFieldNumber = 1,
    kUSensorIdFieldNumber = 2,
    kESignalStatusFieldNumber = 3,
    kESensorTypeFieldNumber = 4,
  };
  // optional .pb.PDK.MsgHeader t_CommonHeader = 1;
  bool has_t_commonheader() const;
  private:
  bool _internal_has_t_commonheader() const;
  public:
  void clear_t_commonheader();
  const ::pb::PDK::MsgHeader& t_commonheader() const;
  PROTOBUF_NODISCARD ::pb::PDK::MsgHeader* release_t_commonheader();
  ::pb::PDK::MsgHeader* mutable_t_commonheader();
  void set_allocated_t_commonheader(::pb::PDK::MsgHeader* t_commonheader);
  private:
  const ::pb::PDK::MsgHeader& _internal_t_commonheader() const;
  ::pb::PDK::MsgHeader* _internal_mutable_t_commonheader();
  public:
  void unsafe_arena_set_allocated_t_commonheader(
      ::pb::PDK::MsgHeader* t_commonheader);
  ::pb::PDK::MsgHeader* unsafe_arena_release_t_commonheader();

  // optional uint32 u_SensorId = 2;
  bool has_u_sensorid() const;
  private:
  bool _internal_has_u_sensorid() const;
  public:
  void clear_u_sensorid();
  uint32_t u_sensorid() const;
  void set_u_sensorid(uint32_t value);
  private:
  uint32_t _internal_u_sensorid() const;
  void _internal_set_u_sensorid(uint32_t value);
  public:

  // optional .pb.PDK.SensorMsgHeader.SignalStatus e_SignalStatus = 3 [default = EM_SIGSTATE_INVALID];
  bool has_e_signalstatus() const;
  private:
  bool _internal_has_e_signalstatus() const;
  public:
  void clear_e_signalstatus();
  ::pb::PDK::SensorMsgHeader_SignalStatus e_signalstatus() const;
  void set_e_signalstatus(::pb::PDK::SensorMsgHeader_SignalStatus value);
  private:
  ::pb::PDK::SensorMsgHeader_SignalStatus _internal_e_signalstatus() const;
  void _internal_set_e_signalstatus(::pb::PDK::SensorMsgHeader_SignalStatus value);
  public:

  // optional .pb.PDK.SensorMsgHeader.SensorType e_SensorType = 4 [default = UNKNOWN];
  bool has_e_sensortype() const;
  private:
  bool _internal_has_e_sensortype() const;
  public:
  void clear_e_sensortype();
  ::pb::PDK::SensorMsgHeader_SensorType e_sensortype() const;
  void set_e_sensortype(::pb::PDK::SensorMsgHeader_SensorType value);
  private:
  ::pb::PDK::SensorMsgHeader_SensorType _internal_e_sensortype() const;
  void _internal_set_e_sensortype(::pb::PDK::SensorMsgHeader_SensorType value);
  public:

  // @@protoc_insertion_point(class_scope:pb.PDK.SensorMsgHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::PDK::MsgHeader* t_commonheader_;
  uint32_t u_sensorid_;
  int e_signalstatus_;
  int e_sensortype_;
  friend struct ::TableStruct_pdk_5fSensorMsgHeader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SensorMsgHeader

// optional .pb.PDK.MsgHeader t_CommonHeader = 1;
inline bool SensorMsgHeader::_internal_has_t_commonheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || t_commonheader_ != nullptr);
  return value;
}
inline bool SensorMsgHeader::has_t_commonheader() const {
  return _internal_has_t_commonheader();
}
inline const ::pb::PDK::MsgHeader& SensorMsgHeader::_internal_t_commonheader() const {
  const ::pb::PDK::MsgHeader* p = t_commonheader_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::PDK::MsgHeader&>(
      ::pb::PDK::_MsgHeader_default_instance_);
}
inline const ::pb::PDK::MsgHeader& SensorMsgHeader::t_commonheader() const {
  // @@protoc_insertion_point(field_get:pb.PDK.SensorMsgHeader.t_CommonHeader)
  return _internal_t_commonheader();
}
inline void SensorMsgHeader::unsafe_arena_set_allocated_t_commonheader(
    ::pb::PDK::MsgHeader* t_commonheader) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_commonheader_);
  }
  t_commonheader_ = t_commonheader;
  if (t_commonheader) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.PDK.SensorMsgHeader.t_CommonHeader)
}
inline ::pb::PDK::MsgHeader* SensorMsgHeader::release_t_commonheader() {
  _has_bits_[0] &= ~0x00000001u;
  ::pb::PDK::MsgHeader* temp = t_commonheader_;
  t_commonheader_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::PDK::MsgHeader* SensorMsgHeader::unsafe_arena_release_t_commonheader() {
  // @@protoc_insertion_point(field_release:pb.PDK.SensorMsgHeader.t_CommonHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::PDK::MsgHeader* temp = t_commonheader_;
  t_commonheader_ = nullptr;
  return temp;
}
inline ::pb::PDK::MsgHeader* SensorMsgHeader::_internal_mutable_t_commonheader() {
  _has_bits_[0] |= 0x00000001u;
  if (t_commonheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::PDK::MsgHeader>(GetArenaForAllocation());
    t_commonheader_ = p;
  }
  return t_commonheader_;
}
inline ::pb::PDK::MsgHeader* SensorMsgHeader::mutable_t_commonheader() {
  ::pb::PDK::MsgHeader* _msg = _internal_mutable_t_commonheader();
  // @@protoc_insertion_point(field_mutable:pb.PDK.SensorMsgHeader.t_CommonHeader)
  return _msg;
}
inline void SensorMsgHeader::set_allocated_t_commonheader(::pb::PDK::MsgHeader* t_commonheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_commonheader_);
  }
  if (t_commonheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_commonheader));
    if (message_arena != submessage_arena) {
      t_commonheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t_commonheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  t_commonheader_ = t_commonheader;
  // @@protoc_insertion_point(field_set_allocated:pb.PDK.SensorMsgHeader.t_CommonHeader)
}

// optional uint32 u_SensorId = 2;
inline bool SensorMsgHeader::_internal_has_u_sensorid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SensorMsgHeader::has_u_sensorid() const {
  return _internal_has_u_sensorid();
}
inline void SensorMsgHeader::clear_u_sensorid() {
  u_sensorid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t SensorMsgHeader::_internal_u_sensorid() const {
  return u_sensorid_;
}
inline uint32_t SensorMsgHeader::u_sensorid() const {
  // @@protoc_insertion_point(field_get:pb.PDK.SensorMsgHeader.u_SensorId)
  return _internal_u_sensorid();
}
inline void SensorMsgHeader::_internal_set_u_sensorid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  u_sensorid_ = value;
}
inline void SensorMsgHeader::set_u_sensorid(uint32_t value) {
  _internal_set_u_sensorid(value);
  // @@protoc_insertion_point(field_set:pb.PDK.SensorMsgHeader.u_SensorId)
}

// optional .pb.PDK.SensorMsgHeader.SignalStatus e_SignalStatus = 3 [default = EM_SIGSTATE_INVALID];
inline bool SensorMsgHeader::_internal_has_e_signalstatus() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SensorMsgHeader::has_e_signalstatus() const {
  return _internal_has_e_signalstatus();
}
inline void SensorMsgHeader::clear_e_signalstatus() {
  e_signalstatus_ = 2;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::pb::PDK::SensorMsgHeader_SignalStatus SensorMsgHeader::_internal_e_signalstatus() const {
  return static_cast< ::pb::PDK::SensorMsgHeader_SignalStatus >(e_signalstatus_);
}
inline ::pb::PDK::SensorMsgHeader_SignalStatus SensorMsgHeader::e_signalstatus() const {
  // @@protoc_insertion_point(field_get:pb.PDK.SensorMsgHeader.e_SignalStatus)
  return _internal_e_signalstatus();
}
inline void SensorMsgHeader::_internal_set_e_signalstatus(::pb::PDK::SensorMsgHeader_SignalStatus value) {
  assert(::pb::PDK::SensorMsgHeader_SignalStatus_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  e_signalstatus_ = value;
}
inline void SensorMsgHeader::set_e_signalstatus(::pb::PDK::SensorMsgHeader_SignalStatus value) {
  _internal_set_e_signalstatus(value);
  // @@protoc_insertion_point(field_set:pb.PDK.SensorMsgHeader.e_SignalStatus)
}

// optional .pb.PDK.SensorMsgHeader.SensorType e_SensorType = 4 [default = UNKNOWN];
inline bool SensorMsgHeader::_internal_has_e_sensortype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SensorMsgHeader::has_e_sensortype() const {
  return _internal_has_e_sensortype();
}
inline void SensorMsgHeader::clear_e_sensortype() {
  e_sensortype_ = 99;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::pb::PDK::SensorMsgHeader_SensorType SensorMsgHeader::_internal_e_sensortype() const {
  return static_cast< ::pb::PDK::SensorMsgHeader_SensorType >(e_sensortype_);
}
inline ::pb::PDK::SensorMsgHeader_SensorType SensorMsgHeader::e_sensortype() const {
  // @@protoc_insertion_point(field_get:pb.PDK.SensorMsgHeader.e_SensorType)
  return _internal_e_sensortype();
}
inline void SensorMsgHeader::_internal_set_e_sensortype(::pb::PDK::SensorMsgHeader_SensorType value) {
  assert(::pb::PDK::SensorMsgHeader_SensorType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  e_sensortype_ = value;
}
inline void SensorMsgHeader::set_e_sensortype(::pb::PDK::SensorMsgHeader_SensorType value) {
  _internal_set_e_sensortype(value);
  // @@protoc_insertion_point(field_set:pb.PDK.SensorMsgHeader.e_SensorType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace PDK
}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::PDK::SensorMsgHeader_SignalStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PDK::SensorMsgHeader_SignalStatus>() {
  return ::pb::PDK::SensorMsgHeader_SignalStatus_descriptor();
}
template <> struct is_proto_enum< ::pb::PDK::SensorMsgHeader_SensorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PDK::SensorMsgHeader_SensorType>() {
  return ::pb::PDK::SensorMsgHeader_SensorType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pdk_5fSensorMsgHeader_2eproto
