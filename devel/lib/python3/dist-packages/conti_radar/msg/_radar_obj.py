# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from conti_radar/radar_obj.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class radar_obj(genpy.Message):
  _md5sum = "d139e1dca278064cbcdfddd5e7dfb3bb"
  _type = "conti_radar/radar_obj"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 id
float32[] f_DistX
float32[] f_DistY
float32[] f_VrelX
float32[] f_VrelY
float32[] f_ArelX
float32[] f_ArelY
float32[] f_DistXStd
float32[] f_DistYStd
float32[] f_VrelXStd
float32[] f_VrelYStd
float32[] f_ArelXStd
float32[] f_ArelYStd
float32[] f_LDeltaX_left
float32[] f_LDeltaX_mid
float32[] f_LDeltaX_right
float32[] f_LDeltaY_left

float32[] f_LDeltaY_mid
float32[] f_LDeltaY_right
float32[] f_RCS
float32[] f_ObjectScore
float32[] f_VabsX
float32[] f_VabsY
float32[] f_AabsX
float32[] f_AabsY
float32[] f_VabsXStd
float32[] f_VabsYStd
float32[] f_AabsXStd
float32[] f_AabsYStd

float32[] f_Orientation
float32[] f_OrientationStd
float32[] f_DistZ
float32[] f_DistZStd"""
  __slots__ = ['id','f_DistX','f_DistY','f_VrelX','f_VrelY','f_ArelX','f_ArelY','f_DistXStd','f_DistYStd','f_VrelXStd','f_VrelYStd','f_ArelXStd','f_ArelYStd','f_LDeltaX_left','f_LDeltaX_mid','f_LDeltaX_right','f_LDeltaY_left','f_LDeltaY_mid','f_LDeltaY_right','f_RCS','f_ObjectScore','f_VabsX','f_VabsY','f_AabsX','f_AabsY','f_VabsXStd','f_VabsYStd','f_AabsXStd','f_AabsYStd','f_Orientation','f_OrientationStd','f_DistZ','f_DistZStd']
  _slot_types = ['int32','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,f_DistX,f_DistY,f_VrelX,f_VrelY,f_ArelX,f_ArelY,f_DistXStd,f_DistYStd,f_VrelXStd,f_VrelYStd,f_ArelXStd,f_ArelYStd,f_LDeltaX_left,f_LDeltaX_mid,f_LDeltaX_right,f_LDeltaY_left,f_LDeltaY_mid,f_LDeltaY_right,f_RCS,f_ObjectScore,f_VabsX,f_VabsY,f_AabsX,f_AabsY,f_VabsXStd,f_VabsYStd,f_AabsXStd,f_AabsYStd,f_Orientation,f_OrientationStd,f_DistZ,f_DistZStd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(radar_obj, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.f_DistX is None:
        self.f_DistX = []
      if self.f_DistY is None:
        self.f_DistY = []
      if self.f_VrelX is None:
        self.f_VrelX = []
      if self.f_VrelY is None:
        self.f_VrelY = []
      if self.f_ArelX is None:
        self.f_ArelX = []
      if self.f_ArelY is None:
        self.f_ArelY = []
      if self.f_DistXStd is None:
        self.f_DistXStd = []
      if self.f_DistYStd is None:
        self.f_DistYStd = []
      if self.f_VrelXStd is None:
        self.f_VrelXStd = []
      if self.f_VrelYStd is None:
        self.f_VrelYStd = []
      if self.f_ArelXStd is None:
        self.f_ArelXStd = []
      if self.f_ArelYStd is None:
        self.f_ArelYStd = []
      if self.f_LDeltaX_left is None:
        self.f_LDeltaX_left = []
      if self.f_LDeltaX_mid is None:
        self.f_LDeltaX_mid = []
      if self.f_LDeltaX_right is None:
        self.f_LDeltaX_right = []
      if self.f_LDeltaY_left is None:
        self.f_LDeltaY_left = []
      if self.f_LDeltaY_mid is None:
        self.f_LDeltaY_mid = []
      if self.f_LDeltaY_right is None:
        self.f_LDeltaY_right = []
      if self.f_RCS is None:
        self.f_RCS = []
      if self.f_ObjectScore is None:
        self.f_ObjectScore = []
      if self.f_VabsX is None:
        self.f_VabsX = []
      if self.f_VabsY is None:
        self.f_VabsY = []
      if self.f_AabsX is None:
        self.f_AabsX = []
      if self.f_AabsY is None:
        self.f_AabsY = []
      if self.f_VabsXStd is None:
        self.f_VabsXStd = []
      if self.f_VabsYStd is None:
        self.f_VabsYStd = []
      if self.f_AabsXStd is None:
        self.f_AabsXStd = []
      if self.f_AabsYStd is None:
        self.f_AabsYStd = []
      if self.f_Orientation is None:
        self.f_Orientation = []
      if self.f_OrientationStd is None:
        self.f_OrientationStd = []
      if self.f_DistZ is None:
        self.f_DistZ = []
      if self.f_DistZStd is None:
        self.f_DistZStd = []
    else:
      self.id = 0
      self.f_DistX = []
      self.f_DistY = []
      self.f_VrelX = []
      self.f_VrelY = []
      self.f_ArelX = []
      self.f_ArelY = []
      self.f_DistXStd = []
      self.f_DistYStd = []
      self.f_VrelXStd = []
      self.f_VrelYStd = []
      self.f_ArelXStd = []
      self.f_ArelYStd = []
      self.f_LDeltaX_left = []
      self.f_LDeltaX_mid = []
      self.f_LDeltaX_right = []
      self.f_LDeltaY_left = []
      self.f_LDeltaY_mid = []
      self.f_LDeltaY_right = []
      self.f_RCS = []
      self.f_ObjectScore = []
      self.f_VabsX = []
      self.f_VabsY = []
      self.f_AabsX = []
      self.f_AabsY = []
      self.f_VabsXStd = []
      self.f_VabsYStd = []
      self.f_AabsXStd = []
      self.f_AabsYStd = []
      self.f_Orientation = []
      self.f_OrientationStd = []
      self.f_DistZ = []
      self.f_DistZStd = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.id
      buff.write(_get_struct_i().pack(_x))
      length = len(self.f_DistX)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_DistX))
      length = len(self.f_DistY)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_DistY))
      length = len(self.f_VrelX)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_VrelX))
      length = len(self.f_VrelY)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_VrelY))
      length = len(self.f_ArelX)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_ArelX))
      length = len(self.f_ArelY)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_ArelY))
      length = len(self.f_DistXStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_DistXStd))
      length = len(self.f_DistYStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_DistYStd))
      length = len(self.f_VrelXStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_VrelXStd))
      length = len(self.f_VrelYStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_VrelYStd))
      length = len(self.f_ArelXStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_ArelXStd))
      length = len(self.f_ArelYStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_ArelYStd))
      length = len(self.f_LDeltaX_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_LDeltaX_left))
      length = len(self.f_LDeltaX_mid)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_LDeltaX_mid))
      length = len(self.f_LDeltaX_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_LDeltaX_right))
      length = len(self.f_LDeltaY_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_LDeltaY_left))
      length = len(self.f_LDeltaY_mid)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_LDeltaY_mid))
      length = len(self.f_LDeltaY_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_LDeltaY_right))
      length = len(self.f_RCS)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_RCS))
      length = len(self.f_ObjectScore)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_ObjectScore))
      length = len(self.f_VabsX)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_VabsX))
      length = len(self.f_VabsY)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_VabsY))
      length = len(self.f_AabsX)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_AabsX))
      length = len(self.f_AabsY)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_AabsY))
      length = len(self.f_VabsXStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_VabsXStd))
      length = len(self.f_VabsYStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_VabsYStd))
      length = len(self.f_AabsXStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_AabsXStd))
      length = len(self.f_AabsYStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_AabsYStd))
      length = len(self.f_Orientation)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_Orientation))
      length = len(self.f_OrientationStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_OrientationStd))
      length = len(self.f_DistZ)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_DistZ))
      length = len(self.f_DistZStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.f_DistZStd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_DistX = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_DistY = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_VrelX = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_VrelY = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_ArelX = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_ArelY = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_DistXStd = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_DistYStd = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_VrelXStd = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_VrelYStd = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_ArelXStd = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_ArelYStd = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_LDeltaX_left = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_LDeltaX_mid = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_LDeltaX_right = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_LDeltaY_left = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_LDeltaY_mid = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_LDeltaY_right = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_RCS = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_ObjectScore = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_VabsX = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_VabsY = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_AabsX = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_AabsY = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_VabsXStd = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_VabsYStd = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_AabsXStd = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_AabsYStd = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_Orientation = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_OrientationStd = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_DistZ = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_DistZStd = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.id
      buff.write(_get_struct_i().pack(_x))
      length = len(self.f_DistX)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_DistX.tostring())
      length = len(self.f_DistY)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_DistY.tostring())
      length = len(self.f_VrelX)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_VrelX.tostring())
      length = len(self.f_VrelY)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_VrelY.tostring())
      length = len(self.f_ArelX)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_ArelX.tostring())
      length = len(self.f_ArelY)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_ArelY.tostring())
      length = len(self.f_DistXStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_DistXStd.tostring())
      length = len(self.f_DistYStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_DistYStd.tostring())
      length = len(self.f_VrelXStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_VrelXStd.tostring())
      length = len(self.f_VrelYStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_VrelYStd.tostring())
      length = len(self.f_ArelXStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_ArelXStd.tostring())
      length = len(self.f_ArelYStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_ArelYStd.tostring())
      length = len(self.f_LDeltaX_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_LDeltaX_left.tostring())
      length = len(self.f_LDeltaX_mid)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_LDeltaX_mid.tostring())
      length = len(self.f_LDeltaX_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_LDeltaX_right.tostring())
      length = len(self.f_LDeltaY_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_LDeltaY_left.tostring())
      length = len(self.f_LDeltaY_mid)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_LDeltaY_mid.tostring())
      length = len(self.f_LDeltaY_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_LDeltaY_right.tostring())
      length = len(self.f_RCS)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_RCS.tostring())
      length = len(self.f_ObjectScore)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_ObjectScore.tostring())
      length = len(self.f_VabsX)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_VabsX.tostring())
      length = len(self.f_VabsY)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_VabsY.tostring())
      length = len(self.f_AabsX)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_AabsX.tostring())
      length = len(self.f_AabsY)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_AabsY.tostring())
      length = len(self.f_VabsXStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_VabsXStd.tostring())
      length = len(self.f_VabsYStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_VabsYStd.tostring())
      length = len(self.f_AabsXStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_AabsXStd.tostring())
      length = len(self.f_AabsYStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_AabsYStd.tostring())
      length = len(self.f_Orientation)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_Orientation.tostring())
      length = len(self.f_OrientationStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_OrientationStd.tostring())
      length = len(self.f_DistZ)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_DistZ.tostring())
      length = len(self.f_DistZStd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.f_DistZStd.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_DistX = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_DistY = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_VrelX = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_VrelY = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_ArelX = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_ArelY = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_DistXStd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_DistYStd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_VrelXStd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_VrelYStd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_ArelXStd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_ArelYStd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_LDeltaX_left = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_LDeltaX_mid = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_LDeltaX_right = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_LDeltaY_left = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_LDeltaY_mid = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_LDeltaY_right = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_RCS = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_ObjectScore = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_VabsX = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_VabsY = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_AabsX = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_AabsY = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_VabsXStd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_VabsYStd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_AabsXStd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_AabsYStd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_Orientation = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_OrientationStd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_DistZ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.f_DistZStd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
