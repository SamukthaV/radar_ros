// Generated by gencpp from file conti_radar/radar_img.msg
// DO NOT EDIT!


#ifndef CONTI_RADAR_MESSAGE_RADAR_IMG_H
#define CONTI_RADAR_MESSAGE_RADAR_IMG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace conti_radar
{
template <class ContainerAllocator>
struct radar_img_
{
  typedef radar_img_<ContainerAllocator> Type;

  radar_img_()
    : id(0)
    , range()
    , azimuth()
    , VrelRad()
    , RCS()
    , rangevar()
    , vrelradvar()
    , azimuthvar()
    , SNR()  {
    }
  radar_img_(const ContainerAllocator& _alloc)
    : id(0)
    , range(_alloc)
    , azimuth(_alloc)
    , VrelRad(_alloc)
    , RCS(_alloc)
    , rangevar(_alloc)
    , vrelradvar(_alloc)
    , azimuthvar(_alloc)
    , SNR(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _range_type;
  _range_type range;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _azimuth_type;
  _azimuth_type azimuth;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _VrelRad_type;
  _VrelRad_type VrelRad;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _RCS_type;
  _RCS_type RCS;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _rangevar_type;
  _rangevar_type rangevar;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _vrelradvar_type;
  _vrelradvar_type vrelradvar;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _azimuthvar_type;
  _azimuthvar_type azimuthvar;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _SNR_type;
  _SNR_type SNR;





  typedef boost::shared_ptr< ::conti_radar::radar_img_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::conti_radar::radar_img_<ContainerAllocator> const> ConstPtr;

}; // struct radar_img_

typedef ::conti_radar::radar_img_<std::allocator<void> > radar_img;

typedef boost::shared_ptr< ::conti_radar::radar_img > radar_imgPtr;
typedef boost::shared_ptr< ::conti_radar::radar_img const> radar_imgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::conti_radar::radar_img_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::conti_radar::radar_img_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::conti_radar::radar_img_<ContainerAllocator1> & lhs, const ::conti_radar::radar_img_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.range == rhs.range &&
    lhs.azimuth == rhs.azimuth &&
    lhs.VrelRad == rhs.VrelRad &&
    lhs.RCS == rhs.RCS &&
    lhs.rangevar == rhs.rangevar &&
    lhs.vrelradvar == rhs.vrelradvar &&
    lhs.azimuthvar == rhs.azimuthvar &&
    lhs.SNR == rhs.SNR;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::conti_radar::radar_img_<ContainerAllocator1> & lhs, const ::conti_radar::radar_img_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace conti_radar

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::conti_radar::radar_img_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::conti_radar::radar_img_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::conti_radar::radar_img_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::conti_radar::radar_img_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::conti_radar::radar_img_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::conti_radar::radar_img_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::conti_radar::radar_img_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4bee43583744ef6616006334aa5e5b2e";
  }

  static const char* value(const ::conti_radar::radar_img_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4bee43583744ef66ULL;
  static const uint64_t static_value2 = 0x16006334aa5e5b2eULL;
};

template<class ContainerAllocator>
struct DataType< ::conti_radar::radar_img_<ContainerAllocator> >
{
  static const char* value()
  {
    return "conti_radar/radar_img";
  }

  static const char* value(const ::conti_radar::radar_img_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::conti_radar::radar_img_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"float32[] range\n"
"float32[] azimuth\n"
"float32[] VrelRad\n"
"float32[] RCS\n"
"float32[] rangevar\n"
"float32[] vrelradvar\n"
"float32[] azimuthvar\n"
"float32[] SNR\n"
;
  }

  static const char* value(const ::conti_radar::radar_img_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::conti_radar::radar_img_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.range);
      stream.next(m.azimuth);
      stream.next(m.VrelRad);
      stream.next(m.RCS);
      stream.next(m.rangevar);
      stream.next(m.vrelradvar);
      stream.next(m.azimuthvar);
      stream.next(m.SNR);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct radar_img_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::conti_radar::radar_img_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::conti_radar::radar_img_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "range[]" << std::endl;
    for (size_t i = 0; i < v.range.size(); ++i)
    {
      s << indent << "  range[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.range[i]);
    }
    s << indent << "azimuth[]" << std::endl;
    for (size_t i = 0; i < v.azimuth.size(); ++i)
    {
      s << indent << "  azimuth[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.azimuth[i]);
    }
    s << indent << "VrelRad[]" << std::endl;
    for (size_t i = 0; i < v.VrelRad.size(); ++i)
    {
      s << indent << "  VrelRad[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.VrelRad[i]);
    }
    s << indent << "RCS[]" << std::endl;
    for (size_t i = 0; i < v.RCS.size(); ++i)
    {
      s << indent << "  RCS[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.RCS[i]);
    }
    s << indent << "rangevar[]" << std::endl;
    for (size_t i = 0; i < v.rangevar.size(); ++i)
    {
      s << indent << "  rangevar[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rangevar[i]);
    }
    s << indent << "vrelradvar[]" << std::endl;
    for (size_t i = 0; i < v.vrelradvar.size(); ++i)
    {
      s << indent << "  vrelradvar[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vrelradvar[i]);
    }
    s << indent << "azimuthvar[]" << std::endl;
    for (size_t i = 0; i < v.azimuthvar.size(); ++i)
    {
      s << indent << "  azimuthvar[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.azimuthvar[i]);
    }
    s << indent << "SNR[]" << std::endl;
    for (size_t i = 0; i < v.SNR.size(); ++i)
    {
      s << indent << "  SNR[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.SNR[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTI_RADAR_MESSAGE_RADAR_IMG_H
