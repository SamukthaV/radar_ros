// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdk_RadarStatus.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pdk_5fRadarStatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pdk_5fRadarStatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pdk_SensorMsgHeader.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pdk_5fRadarStatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pdk_5fRadarStatus_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pdk_5fRadarStatus_2eproto;
namespace pb {
namespace PDK {
class RadarStatus;
struct RadarStatusDefaultTypeInternal;
extern RadarStatusDefaultTypeInternal _RadarStatus_default_instance_;
}  // namespace PDK
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::PDK::RadarStatus* Arena::CreateMaybeMessage<::pb::PDK::RadarStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace PDK {

// ===================================================================

class RadarStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PDK.RadarStatus) */ {
 public:
  inline RadarStatus() : RadarStatus(nullptr) {}
  ~RadarStatus() override;
  explicit PROTOBUF_CONSTEXPR RadarStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RadarStatus(const RadarStatus& from);
  RadarStatus(RadarStatus&& from) noexcept
    : RadarStatus() {
    *this = ::std::move(from);
  }

  inline RadarStatus& operator=(const RadarStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarStatus& operator=(RadarStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RadarStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const RadarStatus* internal_default_instance() {
    return reinterpret_cast<const RadarStatus*>(
               &_RadarStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RadarStatus& a, RadarStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RadarStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RadarStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RadarStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RadarStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PDK.RadarStatus";
  }
  protected:
  explicit RadarStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kASWVersionFieldNumber = 5,
    kAEthernetIPFieldNumber = 7,
    kAEthernetMACFieldNumber = 8,
    kASerialNumberFieldNumber = 10,
    kTHeaderFieldNumber = 1,
    kUEthernetVLANFieldNumber = 9,
    kFAzAlignAngleDeviationFarFieldNumber = 14,
    kFAzAlignAngleDeviationNearFieldNumber = 15,
    kFElAlignAngleDeviationFieldNumber = 16,
    kBDeadjustedFieldNumber = 13,
    kBHardwareDefectiveFieldNumber = 33,
    kBExtDisturbedFieldNumber = 34,
    kBSupplVoltLimitFieldNumber = 35,
    kBSensorOffTempFieldNumber = 36,
    kBComErrorFieldNumber = 37,
    kBSWErrorFieldNumber = 38,
    kBTxOutReducedFieldNumber = 39,
  };
  // repeated bytes a_SWVersion = 5;
  int a_swversion_size() const;
  private:
  int _internal_a_swversion_size() const;
  public:
  void clear_a_swversion();
  const std::string& a_swversion(int index) const;
  std::string* mutable_a_swversion(int index);
  void set_a_swversion(int index, const std::string& value);
  void set_a_swversion(int index, std::string&& value);
  void set_a_swversion(int index, const char* value);
  void set_a_swversion(int index, const void* value, size_t size);
  std::string* add_a_swversion();
  void add_a_swversion(const std::string& value);
  void add_a_swversion(std::string&& value);
  void add_a_swversion(const char* value);
  void add_a_swversion(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& a_swversion() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_a_swversion();
  private:
  const std::string& _internal_a_swversion(int index) const;
  std::string* _internal_add_a_swversion();
  public:

  // repeated bytes a_Ethernet_IP = 7;
  int a_ethernet_ip_size() const;
  private:
  int _internal_a_ethernet_ip_size() const;
  public:
  void clear_a_ethernet_ip();
  const std::string& a_ethernet_ip(int index) const;
  std::string* mutable_a_ethernet_ip(int index);
  void set_a_ethernet_ip(int index, const std::string& value);
  void set_a_ethernet_ip(int index, std::string&& value);
  void set_a_ethernet_ip(int index, const char* value);
  void set_a_ethernet_ip(int index, const void* value, size_t size);
  std::string* add_a_ethernet_ip();
  void add_a_ethernet_ip(const std::string& value);
  void add_a_ethernet_ip(std::string&& value);
  void add_a_ethernet_ip(const char* value);
  void add_a_ethernet_ip(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& a_ethernet_ip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_a_ethernet_ip();
  private:
  const std::string& _internal_a_ethernet_ip(int index) const;
  std::string* _internal_add_a_ethernet_ip();
  public:

  // repeated bytes a_Ethernet_MAC = 8;
  int a_ethernet_mac_size() const;
  private:
  int _internal_a_ethernet_mac_size() const;
  public:
  void clear_a_ethernet_mac();
  const std::string& a_ethernet_mac(int index) const;
  std::string* mutable_a_ethernet_mac(int index);
  void set_a_ethernet_mac(int index, const std::string& value);
  void set_a_ethernet_mac(int index, std::string&& value);
  void set_a_ethernet_mac(int index, const char* value);
  void set_a_ethernet_mac(int index, const void* value, size_t size);
  std::string* add_a_ethernet_mac();
  void add_a_ethernet_mac(const std::string& value);
  void add_a_ethernet_mac(std::string&& value);
  void add_a_ethernet_mac(const char* value);
  void add_a_ethernet_mac(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& a_ethernet_mac() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_a_ethernet_mac();
  private:
  const std::string& _internal_a_ethernet_mac(int index) const;
  std::string* _internal_add_a_ethernet_mac();
  public:

  // repeated bytes a_SerialNumber = 10;
  int a_serialnumber_size() const;
  private:
  int _internal_a_serialnumber_size() const;
  public:
  void clear_a_serialnumber();
  const std::string& a_serialnumber(int index) const;
  std::string* mutable_a_serialnumber(int index);
  void set_a_serialnumber(int index, const std::string& value);
  void set_a_serialnumber(int index, std::string&& value);
  void set_a_serialnumber(int index, const char* value);
  void set_a_serialnumber(int index, const void* value, size_t size);
  std::string* add_a_serialnumber();
  void add_a_serialnumber(const std::string& value);
  void add_a_serialnumber(std::string&& value);
  void add_a_serialnumber(const char* value);
  void add_a_serialnumber(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& a_serialnumber() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_a_serialnumber();
  private:
  const std::string& _internal_a_serialnumber(int index) const;
  std::string* _internal_add_a_serialnumber();
  public:

  // optional .pb.PDK.SensorMsgHeader t_Header = 1;
  bool has_t_header() const;
  private:
  bool _internal_has_t_header() const;
  public:
  void clear_t_header();
  const ::pb::PDK::SensorMsgHeader& t_header() const;
  PROTOBUF_NODISCARD ::pb::PDK::SensorMsgHeader* release_t_header();
  ::pb::PDK::SensorMsgHeader* mutable_t_header();
  void set_allocated_t_header(::pb::PDK::SensorMsgHeader* t_header);
  private:
  const ::pb::PDK::SensorMsgHeader& _internal_t_header() const;
  ::pb::PDK::SensorMsgHeader* _internal_mutable_t_header();
  public:
  void unsafe_arena_set_allocated_t_header(
      ::pb::PDK::SensorMsgHeader* t_header);
  ::pb::PDK::SensorMsgHeader* unsafe_arena_release_t_header();

  // optional uint32 u_Ethernet_VLAN = 9;
  bool has_u_ethernet_vlan() const;
  private:
  bool _internal_has_u_ethernet_vlan() const;
  public:
  void clear_u_ethernet_vlan();
  uint32_t u_ethernet_vlan() const;
  void set_u_ethernet_vlan(uint32_t value);
  private:
  uint32_t _internal_u_ethernet_vlan() const;
  void _internal_set_u_ethernet_vlan(uint32_t value);
  public:

  // optional float f_AzAlignAngleDeviation_Far = 14;
  bool has_f_azalignangledeviation_far() const;
  private:
  bool _internal_has_f_azalignangledeviation_far() const;
  public:
  void clear_f_azalignangledeviation_far();
  float f_azalignangledeviation_far() const;
  void set_f_azalignangledeviation_far(float value);
  private:
  float _internal_f_azalignangledeviation_far() const;
  void _internal_set_f_azalignangledeviation_far(float value);
  public:

  // optional float f_AzAlignAngleDeviation_Near = 15;
  bool has_f_azalignangledeviation_near() const;
  private:
  bool _internal_has_f_azalignangledeviation_near() const;
  public:
  void clear_f_azalignangledeviation_near();
  float f_azalignangledeviation_near() const;
  void set_f_azalignangledeviation_near(float value);
  private:
  float _internal_f_azalignangledeviation_near() const;
  void _internal_set_f_azalignangledeviation_near(float value);
  public:

  // optional float f_ElAlignAngleDeviation = 16;
  bool has_f_elalignangledeviation() const;
  private:
  bool _internal_has_f_elalignangledeviation() const;
  public:
  void clear_f_elalignangledeviation();
  float f_elalignangledeviation() const;
  void set_f_elalignangledeviation(float value);
  private:
  float _internal_f_elalignangledeviation() const;
  void _internal_set_f_elalignangledeviation(float value);
  public:

  // optional bool b_Deadjusted = 13;
  bool has_b_deadjusted() const;
  private:
  bool _internal_has_b_deadjusted() const;
  public:
  void clear_b_deadjusted();
  bool b_deadjusted() const;
  void set_b_deadjusted(bool value);
  private:
  bool _internal_b_deadjusted() const;
  void _internal_set_b_deadjusted(bool value);
  public:

  // optional bool b_HardwareDefective = 33;
  bool has_b_hardwaredefective() const;
  private:
  bool _internal_has_b_hardwaredefective() const;
  public:
  void clear_b_hardwaredefective();
  bool b_hardwaredefective() const;
  void set_b_hardwaredefective(bool value);
  private:
  bool _internal_b_hardwaredefective() const;
  void _internal_set_b_hardwaredefective(bool value);
  public:

  // optional bool b_ExtDisturbed = 34;
  bool has_b_extdisturbed() const;
  private:
  bool _internal_has_b_extdisturbed() const;
  public:
  void clear_b_extdisturbed();
  bool b_extdisturbed() const;
  void set_b_extdisturbed(bool value);
  private:
  bool _internal_b_extdisturbed() const;
  void _internal_set_b_extdisturbed(bool value);
  public:

  // optional bool b_SupplVoltLimit = 35;
  bool has_b_supplvoltlimit() const;
  private:
  bool _internal_has_b_supplvoltlimit() const;
  public:
  void clear_b_supplvoltlimit();
  bool b_supplvoltlimit() const;
  void set_b_supplvoltlimit(bool value);
  private:
  bool _internal_b_supplvoltlimit() const;
  void _internal_set_b_supplvoltlimit(bool value);
  public:

  // optional bool b_SensorOffTemp = 36;
  bool has_b_sensorofftemp() const;
  private:
  bool _internal_has_b_sensorofftemp() const;
  public:
  void clear_b_sensorofftemp();
  bool b_sensorofftemp() const;
  void set_b_sensorofftemp(bool value);
  private:
  bool _internal_b_sensorofftemp() const;
  void _internal_set_b_sensorofftemp(bool value);
  public:

  // optional bool b_ComError = 37;
  bool has_b_comerror() const;
  private:
  bool _internal_has_b_comerror() const;
  public:
  void clear_b_comerror();
  bool b_comerror() const;
  void set_b_comerror(bool value);
  private:
  bool _internal_b_comerror() const;
  void _internal_set_b_comerror(bool value);
  public:

  // optional bool b_SWError = 38;
  bool has_b_swerror() const;
  private:
  bool _internal_has_b_swerror() const;
  public:
  void clear_b_swerror();
  bool b_swerror() const;
  void set_b_swerror(bool value);
  private:
  bool _internal_b_swerror() const;
  void _internal_set_b_swerror(bool value);
  public:

  // optional bool b_TxOutReduced = 39;
  bool has_b_txoutreduced() const;
  private:
  bool _internal_has_b_txoutreduced() const;
  public:
  void clear_b_txoutreduced();
  bool b_txoutreduced() const;
  void set_b_txoutreduced(bool value);
  private:
  bool _internal_b_txoutreduced() const;
  void _internal_set_b_txoutreduced(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.PDK.RadarStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> a_swversion_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> a_ethernet_ip_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> a_ethernet_mac_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> a_serialnumber_;
  ::pb::PDK::SensorMsgHeader* t_header_;
  uint32_t u_ethernet_vlan_;
  float f_azalignangledeviation_far_;
  float f_azalignangledeviation_near_;
  float f_elalignangledeviation_;
  bool b_deadjusted_;
  bool b_hardwaredefective_;
  bool b_extdisturbed_;
  bool b_supplvoltlimit_;
  bool b_sensorofftemp_;
  bool b_comerror_;
  bool b_swerror_;
  bool b_txoutreduced_;
  friend struct ::TableStruct_pdk_5fRadarStatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RadarStatus

// optional .pb.PDK.SensorMsgHeader t_Header = 1;
inline bool RadarStatus::_internal_has_t_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || t_header_ != nullptr);
  return value;
}
inline bool RadarStatus::has_t_header() const {
  return _internal_has_t_header();
}
inline const ::pb::PDK::SensorMsgHeader& RadarStatus::_internal_t_header() const {
  const ::pb::PDK::SensorMsgHeader* p = t_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::PDK::SensorMsgHeader&>(
      ::pb::PDK::_SensorMsgHeader_default_instance_);
}
inline const ::pb::PDK::SensorMsgHeader& RadarStatus::t_header() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarStatus.t_Header)
  return _internal_t_header();
}
inline void RadarStatus::unsafe_arena_set_allocated_t_header(
    ::pb::PDK::SensorMsgHeader* t_header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_header_);
  }
  t_header_ = t_header;
  if (t_header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.PDK.RadarStatus.t_Header)
}
inline ::pb::PDK::SensorMsgHeader* RadarStatus::release_t_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::pb::PDK::SensorMsgHeader* temp = t_header_;
  t_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::PDK::SensorMsgHeader* RadarStatus::unsafe_arena_release_t_header() {
  // @@protoc_insertion_point(field_release:pb.PDK.RadarStatus.t_Header)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::PDK::SensorMsgHeader* temp = t_header_;
  t_header_ = nullptr;
  return temp;
}
inline ::pb::PDK::SensorMsgHeader* RadarStatus::_internal_mutable_t_header() {
  _has_bits_[0] |= 0x00000001u;
  if (t_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::PDK::SensorMsgHeader>(GetArenaForAllocation());
    t_header_ = p;
  }
  return t_header_;
}
inline ::pb::PDK::SensorMsgHeader* RadarStatus::mutable_t_header() {
  ::pb::PDK::SensorMsgHeader* _msg = _internal_mutable_t_header();
  // @@protoc_insertion_point(field_mutable:pb.PDK.RadarStatus.t_Header)
  return _msg;
}
inline void RadarStatus::set_allocated_t_header(::pb::PDK::SensorMsgHeader* t_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_header_);
  }
  if (t_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_header));
    if (message_arena != submessage_arena) {
      t_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  t_header_ = t_header;
  // @@protoc_insertion_point(field_set_allocated:pb.PDK.RadarStatus.t_Header)
}

// repeated bytes a_SWVersion = 5;
inline int RadarStatus::_internal_a_swversion_size() const {
  return a_swversion_.size();
}
inline int RadarStatus::a_swversion_size() const {
  return _internal_a_swversion_size();
}
inline void RadarStatus::clear_a_swversion() {
  a_swversion_.Clear();
}
inline std::string* RadarStatus::add_a_swversion() {
  std::string* _s = _internal_add_a_swversion();
  // @@protoc_insertion_point(field_add_mutable:pb.PDK.RadarStatus.a_SWVersion)
  return _s;
}
inline const std::string& RadarStatus::_internal_a_swversion(int index) const {
  return a_swversion_.Get(index);
}
inline const std::string& RadarStatus::a_swversion(int index) const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarStatus.a_SWVersion)
  return _internal_a_swversion(index);
}
inline std::string* RadarStatus::mutable_a_swversion(int index) {
  // @@protoc_insertion_point(field_mutable:pb.PDK.RadarStatus.a_SWVersion)
  return a_swversion_.Mutable(index);
}
inline void RadarStatus::set_a_swversion(int index, const std::string& value) {
  a_swversion_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pb.PDK.RadarStatus.a_SWVersion)
}
inline void RadarStatus::set_a_swversion(int index, std::string&& value) {
  a_swversion_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pb.PDK.RadarStatus.a_SWVersion)
}
inline void RadarStatus::set_a_swversion(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  a_swversion_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.PDK.RadarStatus.a_SWVersion)
}
inline void RadarStatus::set_a_swversion(int index, const void* value, size_t size) {
  a_swversion_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.PDK.RadarStatus.a_SWVersion)
}
inline std::string* RadarStatus::_internal_add_a_swversion() {
  return a_swversion_.Add();
}
inline void RadarStatus::add_a_swversion(const std::string& value) {
  a_swversion_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.PDK.RadarStatus.a_SWVersion)
}
inline void RadarStatus::add_a_swversion(std::string&& value) {
  a_swversion_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.PDK.RadarStatus.a_SWVersion)
}
inline void RadarStatus::add_a_swversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  a_swversion_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.PDK.RadarStatus.a_SWVersion)
}
inline void RadarStatus::add_a_swversion(const void* value, size_t size) {
  a_swversion_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.PDK.RadarStatus.a_SWVersion)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RadarStatus::a_swversion() const {
  // @@protoc_insertion_point(field_list:pb.PDK.RadarStatus.a_SWVersion)
  return a_swversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RadarStatus::mutable_a_swversion() {
  // @@protoc_insertion_point(field_mutable_list:pb.PDK.RadarStatus.a_SWVersion)
  return &a_swversion_;
}

// repeated bytes a_Ethernet_IP = 7;
inline int RadarStatus::_internal_a_ethernet_ip_size() const {
  return a_ethernet_ip_.size();
}
inline int RadarStatus::a_ethernet_ip_size() const {
  return _internal_a_ethernet_ip_size();
}
inline void RadarStatus::clear_a_ethernet_ip() {
  a_ethernet_ip_.Clear();
}
inline std::string* RadarStatus::add_a_ethernet_ip() {
  std::string* _s = _internal_add_a_ethernet_ip();
  // @@protoc_insertion_point(field_add_mutable:pb.PDK.RadarStatus.a_Ethernet_IP)
  return _s;
}
inline const std::string& RadarStatus::_internal_a_ethernet_ip(int index) const {
  return a_ethernet_ip_.Get(index);
}
inline const std::string& RadarStatus::a_ethernet_ip(int index) const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarStatus.a_Ethernet_IP)
  return _internal_a_ethernet_ip(index);
}
inline std::string* RadarStatus::mutable_a_ethernet_ip(int index) {
  // @@protoc_insertion_point(field_mutable:pb.PDK.RadarStatus.a_Ethernet_IP)
  return a_ethernet_ip_.Mutable(index);
}
inline void RadarStatus::set_a_ethernet_ip(int index, const std::string& value) {
  a_ethernet_ip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pb.PDK.RadarStatus.a_Ethernet_IP)
}
inline void RadarStatus::set_a_ethernet_ip(int index, std::string&& value) {
  a_ethernet_ip_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pb.PDK.RadarStatus.a_Ethernet_IP)
}
inline void RadarStatus::set_a_ethernet_ip(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  a_ethernet_ip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.PDK.RadarStatus.a_Ethernet_IP)
}
inline void RadarStatus::set_a_ethernet_ip(int index, const void* value, size_t size) {
  a_ethernet_ip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.PDK.RadarStatus.a_Ethernet_IP)
}
inline std::string* RadarStatus::_internal_add_a_ethernet_ip() {
  return a_ethernet_ip_.Add();
}
inline void RadarStatus::add_a_ethernet_ip(const std::string& value) {
  a_ethernet_ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.PDK.RadarStatus.a_Ethernet_IP)
}
inline void RadarStatus::add_a_ethernet_ip(std::string&& value) {
  a_ethernet_ip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.PDK.RadarStatus.a_Ethernet_IP)
}
inline void RadarStatus::add_a_ethernet_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  a_ethernet_ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.PDK.RadarStatus.a_Ethernet_IP)
}
inline void RadarStatus::add_a_ethernet_ip(const void* value, size_t size) {
  a_ethernet_ip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.PDK.RadarStatus.a_Ethernet_IP)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RadarStatus::a_ethernet_ip() const {
  // @@protoc_insertion_point(field_list:pb.PDK.RadarStatus.a_Ethernet_IP)
  return a_ethernet_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RadarStatus::mutable_a_ethernet_ip() {
  // @@protoc_insertion_point(field_mutable_list:pb.PDK.RadarStatus.a_Ethernet_IP)
  return &a_ethernet_ip_;
}

// repeated bytes a_Ethernet_MAC = 8;
inline int RadarStatus::_internal_a_ethernet_mac_size() const {
  return a_ethernet_mac_.size();
}
inline int RadarStatus::a_ethernet_mac_size() const {
  return _internal_a_ethernet_mac_size();
}
inline void RadarStatus::clear_a_ethernet_mac() {
  a_ethernet_mac_.Clear();
}
inline std::string* RadarStatus::add_a_ethernet_mac() {
  std::string* _s = _internal_add_a_ethernet_mac();
  // @@protoc_insertion_point(field_add_mutable:pb.PDK.RadarStatus.a_Ethernet_MAC)
  return _s;
}
inline const std::string& RadarStatus::_internal_a_ethernet_mac(int index) const {
  return a_ethernet_mac_.Get(index);
}
inline const std::string& RadarStatus::a_ethernet_mac(int index) const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarStatus.a_Ethernet_MAC)
  return _internal_a_ethernet_mac(index);
}
inline std::string* RadarStatus::mutable_a_ethernet_mac(int index) {
  // @@protoc_insertion_point(field_mutable:pb.PDK.RadarStatus.a_Ethernet_MAC)
  return a_ethernet_mac_.Mutable(index);
}
inline void RadarStatus::set_a_ethernet_mac(int index, const std::string& value) {
  a_ethernet_mac_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pb.PDK.RadarStatus.a_Ethernet_MAC)
}
inline void RadarStatus::set_a_ethernet_mac(int index, std::string&& value) {
  a_ethernet_mac_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pb.PDK.RadarStatus.a_Ethernet_MAC)
}
inline void RadarStatus::set_a_ethernet_mac(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  a_ethernet_mac_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.PDK.RadarStatus.a_Ethernet_MAC)
}
inline void RadarStatus::set_a_ethernet_mac(int index, const void* value, size_t size) {
  a_ethernet_mac_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.PDK.RadarStatus.a_Ethernet_MAC)
}
inline std::string* RadarStatus::_internal_add_a_ethernet_mac() {
  return a_ethernet_mac_.Add();
}
inline void RadarStatus::add_a_ethernet_mac(const std::string& value) {
  a_ethernet_mac_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.PDK.RadarStatus.a_Ethernet_MAC)
}
inline void RadarStatus::add_a_ethernet_mac(std::string&& value) {
  a_ethernet_mac_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.PDK.RadarStatus.a_Ethernet_MAC)
}
inline void RadarStatus::add_a_ethernet_mac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  a_ethernet_mac_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.PDK.RadarStatus.a_Ethernet_MAC)
}
inline void RadarStatus::add_a_ethernet_mac(const void* value, size_t size) {
  a_ethernet_mac_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.PDK.RadarStatus.a_Ethernet_MAC)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RadarStatus::a_ethernet_mac() const {
  // @@protoc_insertion_point(field_list:pb.PDK.RadarStatus.a_Ethernet_MAC)
  return a_ethernet_mac_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RadarStatus::mutable_a_ethernet_mac() {
  // @@protoc_insertion_point(field_mutable_list:pb.PDK.RadarStatus.a_Ethernet_MAC)
  return &a_ethernet_mac_;
}

// optional uint32 u_Ethernet_VLAN = 9;
inline bool RadarStatus::_internal_has_u_ethernet_vlan() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RadarStatus::has_u_ethernet_vlan() const {
  return _internal_has_u_ethernet_vlan();
}
inline void RadarStatus::clear_u_ethernet_vlan() {
  u_ethernet_vlan_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t RadarStatus::_internal_u_ethernet_vlan() const {
  return u_ethernet_vlan_;
}
inline uint32_t RadarStatus::u_ethernet_vlan() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarStatus.u_Ethernet_VLAN)
  return _internal_u_ethernet_vlan();
}
inline void RadarStatus::_internal_set_u_ethernet_vlan(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  u_ethernet_vlan_ = value;
}
inline void RadarStatus::set_u_ethernet_vlan(uint32_t value) {
  _internal_set_u_ethernet_vlan(value);
  // @@protoc_insertion_point(field_set:pb.PDK.RadarStatus.u_Ethernet_VLAN)
}

// repeated bytes a_SerialNumber = 10;
inline int RadarStatus::_internal_a_serialnumber_size() const {
  return a_serialnumber_.size();
}
inline int RadarStatus::a_serialnumber_size() const {
  return _internal_a_serialnumber_size();
}
inline void RadarStatus::clear_a_serialnumber() {
  a_serialnumber_.Clear();
}
inline std::string* RadarStatus::add_a_serialnumber() {
  std::string* _s = _internal_add_a_serialnumber();
  // @@protoc_insertion_point(field_add_mutable:pb.PDK.RadarStatus.a_SerialNumber)
  return _s;
}
inline const std::string& RadarStatus::_internal_a_serialnumber(int index) const {
  return a_serialnumber_.Get(index);
}
inline const std::string& RadarStatus::a_serialnumber(int index) const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarStatus.a_SerialNumber)
  return _internal_a_serialnumber(index);
}
inline std::string* RadarStatus::mutable_a_serialnumber(int index) {
  // @@protoc_insertion_point(field_mutable:pb.PDK.RadarStatus.a_SerialNumber)
  return a_serialnumber_.Mutable(index);
}
inline void RadarStatus::set_a_serialnumber(int index, const std::string& value) {
  a_serialnumber_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pb.PDK.RadarStatus.a_SerialNumber)
}
inline void RadarStatus::set_a_serialnumber(int index, std::string&& value) {
  a_serialnumber_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pb.PDK.RadarStatus.a_SerialNumber)
}
inline void RadarStatus::set_a_serialnumber(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  a_serialnumber_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.PDK.RadarStatus.a_SerialNumber)
}
inline void RadarStatus::set_a_serialnumber(int index, const void* value, size_t size) {
  a_serialnumber_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.PDK.RadarStatus.a_SerialNumber)
}
inline std::string* RadarStatus::_internal_add_a_serialnumber() {
  return a_serialnumber_.Add();
}
inline void RadarStatus::add_a_serialnumber(const std::string& value) {
  a_serialnumber_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.PDK.RadarStatus.a_SerialNumber)
}
inline void RadarStatus::add_a_serialnumber(std::string&& value) {
  a_serialnumber_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.PDK.RadarStatus.a_SerialNumber)
}
inline void RadarStatus::add_a_serialnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  a_serialnumber_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.PDK.RadarStatus.a_SerialNumber)
}
inline void RadarStatus::add_a_serialnumber(const void* value, size_t size) {
  a_serialnumber_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.PDK.RadarStatus.a_SerialNumber)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RadarStatus::a_serialnumber() const {
  // @@protoc_insertion_point(field_list:pb.PDK.RadarStatus.a_SerialNumber)
  return a_serialnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RadarStatus::mutable_a_serialnumber() {
  // @@protoc_insertion_point(field_mutable_list:pb.PDK.RadarStatus.a_SerialNumber)
  return &a_serialnumber_;
}

// optional bool b_Deadjusted = 13;
inline bool RadarStatus::_internal_has_b_deadjusted() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RadarStatus::has_b_deadjusted() const {
  return _internal_has_b_deadjusted();
}
inline void RadarStatus::clear_b_deadjusted() {
  b_deadjusted_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool RadarStatus::_internal_b_deadjusted() const {
  return b_deadjusted_;
}
inline bool RadarStatus::b_deadjusted() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarStatus.b_Deadjusted)
  return _internal_b_deadjusted();
}
inline void RadarStatus::_internal_set_b_deadjusted(bool value) {
  _has_bits_[0] |= 0x00000020u;
  b_deadjusted_ = value;
}
inline void RadarStatus::set_b_deadjusted(bool value) {
  _internal_set_b_deadjusted(value);
  // @@protoc_insertion_point(field_set:pb.PDK.RadarStatus.b_Deadjusted)
}

// optional float f_AzAlignAngleDeviation_Far = 14;
inline bool RadarStatus::_internal_has_f_azalignangledeviation_far() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RadarStatus::has_f_azalignangledeviation_far() const {
  return _internal_has_f_azalignangledeviation_far();
}
inline void RadarStatus::clear_f_azalignangledeviation_far() {
  f_azalignangledeviation_far_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float RadarStatus::_internal_f_azalignangledeviation_far() const {
  return f_azalignangledeviation_far_;
}
inline float RadarStatus::f_azalignangledeviation_far() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarStatus.f_AzAlignAngleDeviation_Far)
  return _internal_f_azalignangledeviation_far();
}
inline void RadarStatus::_internal_set_f_azalignangledeviation_far(float value) {
  _has_bits_[0] |= 0x00000004u;
  f_azalignangledeviation_far_ = value;
}
inline void RadarStatus::set_f_azalignangledeviation_far(float value) {
  _internal_set_f_azalignangledeviation_far(value);
  // @@protoc_insertion_point(field_set:pb.PDK.RadarStatus.f_AzAlignAngleDeviation_Far)
}

// optional float f_AzAlignAngleDeviation_Near = 15;
inline bool RadarStatus::_internal_has_f_azalignangledeviation_near() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RadarStatus::has_f_azalignangledeviation_near() const {
  return _internal_has_f_azalignangledeviation_near();
}
inline void RadarStatus::clear_f_azalignangledeviation_near() {
  f_azalignangledeviation_near_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float RadarStatus::_internal_f_azalignangledeviation_near() const {
  return f_azalignangledeviation_near_;
}
inline float RadarStatus::f_azalignangledeviation_near() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarStatus.f_AzAlignAngleDeviation_Near)
  return _internal_f_azalignangledeviation_near();
}
inline void RadarStatus::_internal_set_f_azalignangledeviation_near(float value) {
  _has_bits_[0] |= 0x00000008u;
  f_azalignangledeviation_near_ = value;
}
inline void RadarStatus::set_f_azalignangledeviation_near(float value) {
  _internal_set_f_azalignangledeviation_near(value);
  // @@protoc_insertion_point(field_set:pb.PDK.RadarStatus.f_AzAlignAngleDeviation_Near)
}

// optional float f_ElAlignAngleDeviation = 16;
inline bool RadarStatus::_internal_has_f_elalignangledeviation() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RadarStatus::has_f_elalignangledeviation() const {
  return _internal_has_f_elalignangledeviation();
}
inline void RadarStatus::clear_f_elalignangledeviation() {
  f_elalignangledeviation_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float RadarStatus::_internal_f_elalignangledeviation() const {
  return f_elalignangledeviation_;
}
inline float RadarStatus::f_elalignangledeviation() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarStatus.f_ElAlignAngleDeviation)
  return _internal_f_elalignangledeviation();
}
inline void RadarStatus::_internal_set_f_elalignangledeviation(float value) {
  _has_bits_[0] |= 0x00000010u;
  f_elalignangledeviation_ = value;
}
inline void RadarStatus::set_f_elalignangledeviation(float value) {
  _internal_set_f_elalignangledeviation(value);
  // @@protoc_insertion_point(field_set:pb.PDK.RadarStatus.f_ElAlignAngleDeviation)
}

// optional bool b_HardwareDefective = 33;
inline bool RadarStatus::_internal_has_b_hardwaredefective() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RadarStatus::has_b_hardwaredefective() const {
  return _internal_has_b_hardwaredefective();
}
inline void RadarStatus::clear_b_hardwaredefective() {
  b_hardwaredefective_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool RadarStatus::_internal_b_hardwaredefective() const {
  return b_hardwaredefective_;
}
inline bool RadarStatus::b_hardwaredefective() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarStatus.b_HardwareDefective)
  return _internal_b_hardwaredefective();
}
inline void RadarStatus::_internal_set_b_hardwaredefective(bool value) {
  _has_bits_[0] |= 0x00000040u;
  b_hardwaredefective_ = value;
}
inline void RadarStatus::set_b_hardwaredefective(bool value) {
  _internal_set_b_hardwaredefective(value);
  // @@protoc_insertion_point(field_set:pb.PDK.RadarStatus.b_HardwareDefective)
}

// optional bool b_ExtDisturbed = 34;
inline bool RadarStatus::_internal_has_b_extdisturbed() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RadarStatus::has_b_extdisturbed() const {
  return _internal_has_b_extdisturbed();
}
inline void RadarStatus::clear_b_extdisturbed() {
  b_extdisturbed_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool RadarStatus::_internal_b_extdisturbed() const {
  return b_extdisturbed_;
}
inline bool RadarStatus::b_extdisturbed() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarStatus.b_ExtDisturbed)
  return _internal_b_extdisturbed();
}
inline void RadarStatus::_internal_set_b_extdisturbed(bool value) {
  _has_bits_[0] |= 0x00000080u;
  b_extdisturbed_ = value;
}
inline void RadarStatus::set_b_extdisturbed(bool value) {
  _internal_set_b_extdisturbed(value);
  // @@protoc_insertion_point(field_set:pb.PDK.RadarStatus.b_ExtDisturbed)
}

// optional bool b_SupplVoltLimit = 35;
inline bool RadarStatus::_internal_has_b_supplvoltlimit() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RadarStatus::has_b_supplvoltlimit() const {
  return _internal_has_b_supplvoltlimit();
}
inline void RadarStatus::clear_b_supplvoltlimit() {
  b_supplvoltlimit_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool RadarStatus::_internal_b_supplvoltlimit() const {
  return b_supplvoltlimit_;
}
inline bool RadarStatus::b_supplvoltlimit() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarStatus.b_SupplVoltLimit)
  return _internal_b_supplvoltlimit();
}
inline void RadarStatus::_internal_set_b_supplvoltlimit(bool value) {
  _has_bits_[0] |= 0x00000100u;
  b_supplvoltlimit_ = value;
}
inline void RadarStatus::set_b_supplvoltlimit(bool value) {
  _internal_set_b_supplvoltlimit(value);
  // @@protoc_insertion_point(field_set:pb.PDK.RadarStatus.b_SupplVoltLimit)
}

// optional bool b_SensorOffTemp = 36;
inline bool RadarStatus::_internal_has_b_sensorofftemp() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RadarStatus::has_b_sensorofftemp() const {
  return _internal_has_b_sensorofftemp();
}
inline void RadarStatus::clear_b_sensorofftemp() {
  b_sensorofftemp_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool RadarStatus::_internal_b_sensorofftemp() const {
  return b_sensorofftemp_;
}
inline bool RadarStatus::b_sensorofftemp() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarStatus.b_SensorOffTemp)
  return _internal_b_sensorofftemp();
}
inline void RadarStatus::_internal_set_b_sensorofftemp(bool value) {
  _has_bits_[0] |= 0x00000200u;
  b_sensorofftemp_ = value;
}
inline void RadarStatus::set_b_sensorofftemp(bool value) {
  _internal_set_b_sensorofftemp(value);
  // @@protoc_insertion_point(field_set:pb.PDK.RadarStatus.b_SensorOffTemp)
}

// optional bool b_ComError = 37;
inline bool RadarStatus::_internal_has_b_comerror() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RadarStatus::has_b_comerror() const {
  return _internal_has_b_comerror();
}
inline void RadarStatus::clear_b_comerror() {
  b_comerror_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool RadarStatus::_internal_b_comerror() const {
  return b_comerror_;
}
inline bool RadarStatus::b_comerror() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarStatus.b_ComError)
  return _internal_b_comerror();
}
inline void RadarStatus::_internal_set_b_comerror(bool value) {
  _has_bits_[0] |= 0x00000400u;
  b_comerror_ = value;
}
inline void RadarStatus::set_b_comerror(bool value) {
  _internal_set_b_comerror(value);
  // @@protoc_insertion_point(field_set:pb.PDK.RadarStatus.b_ComError)
}

// optional bool b_SWError = 38;
inline bool RadarStatus::_internal_has_b_swerror() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool RadarStatus::has_b_swerror() const {
  return _internal_has_b_swerror();
}
inline void RadarStatus::clear_b_swerror() {
  b_swerror_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool RadarStatus::_internal_b_swerror() const {
  return b_swerror_;
}
inline bool RadarStatus::b_swerror() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarStatus.b_SWError)
  return _internal_b_swerror();
}
inline void RadarStatus::_internal_set_b_swerror(bool value) {
  _has_bits_[0] |= 0x00000800u;
  b_swerror_ = value;
}
inline void RadarStatus::set_b_swerror(bool value) {
  _internal_set_b_swerror(value);
  // @@protoc_insertion_point(field_set:pb.PDK.RadarStatus.b_SWError)
}

// optional bool b_TxOutReduced = 39;
inline bool RadarStatus::_internal_has_b_txoutreduced() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool RadarStatus::has_b_txoutreduced() const {
  return _internal_has_b_txoutreduced();
}
inline void RadarStatus::clear_b_txoutreduced() {
  b_txoutreduced_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool RadarStatus::_internal_b_txoutreduced() const {
  return b_txoutreduced_;
}
inline bool RadarStatus::b_txoutreduced() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarStatus.b_TxOutReduced)
  return _internal_b_txoutreduced();
}
inline void RadarStatus::_internal_set_b_txoutreduced(bool value) {
  _has_bits_[0] |= 0x00001000u;
  b_txoutreduced_ = value;
}
inline void RadarStatus::set_b_txoutreduced(bool value) {
  _internal_set_b_txoutreduced(value);
  // @@protoc_insertion_point(field_set:pb.PDK.RadarStatus.b_TxOutReduced)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace PDK
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pdk_5fRadarStatus_2eproto
