// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdk_MsgHeader.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pdk_5fMsgHeader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pdk_5fMsgHeader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pdk_5fMsgHeader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pdk_5fMsgHeader_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pdk_5fMsgHeader_2eproto;
namespace pb {
namespace PDK {
class MsgHeader;
struct MsgHeaderDefaultTypeInternal;
extern MsgHeaderDefaultTypeInternal _MsgHeader_default_instance_;
class MsgHeader_Time;
struct MsgHeader_TimeDefaultTypeInternal;
extern MsgHeader_TimeDefaultTypeInternal _MsgHeader_Time_default_instance_;
}  // namespace PDK
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::PDK::MsgHeader* Arena::CreateMaybeMessage<::pb::PDK::MsgHeader>(Arena*);
template<> ::pb::PDK::MsgHeader_Time* Arena::CreateMaybeMessage<::pb::PDK::MsgHeader_Time>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace PDK {

enum MsgHeader_SignalSource : int {
  MsgHeader_SignalSource_UNKNOWN = 0,
  MsgHeader_SignalSource_SENSOR = 1,
  MsgHeader_SignalSource_ALGORITHM = 2
};
bool MsgHeader_SignalSource_IsValid(int value);
constexpr MsgHeader_SignalSource MsgHeader_SignalSource_SignalSource_MIN = MsgHeader_SignalSource_UNKNOWN;
constexpr MsgHeader_SignalSource MsgHeader_SignalSource_SignalSource_MAX = MsgHeader_SignalSource_ALGORITHM;
constexpr int MsgHeader_SignalSource_SignalSource_ARRAYSIZE = MsgHeader_SignalSource_SignalSource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgHeader_SignalSource_descriptor();
template<typename T>
inline const std::string& MsgHeader_SignalSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgHeader_SignalSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgHeader_SignalSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgHeader_SignalSource_descriptor(), enum_t_value);
}
inline bool MsgHeader_SignalSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgHeader_SignalSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgHeader_SignalSource>(
    MsgHeader_SignalSource_descriptor(), name, value);
}
enum MsgHeader_TimeStampSyncState : int {
  MsgHeader_TimeStampSyncState_UNKNOWN_SYNC = 0,
  MsgHeader_TimeStampSyncState_NOT_SYNCED = 1,
  MsgHeader_TimeStampSyncState_SYNCED_PTP = 3,
  MsgHeader_TimeStampSyncState_SYNCED_CAN = 5,
  MsgHeader_TimeStampSyncState_SYNC_LOST = 6
};
bool MsgHeader_TimeStampSyncState_IsValid(int value);
constexpr MsgHeader_TimeStampSyncState MsgHeader_TimeStampSyncState_TimeStampSyncState_MIN = MsgHeader_TimeStampSyncState_UNKNOWN_SYNC;
constexpr MsgHeader_TimeStampSyncState MsgHeader_TimeStampSyncState_TimeStampSyncState_MAX = MsgHeader_TimeStampSyncState_SYNC_LOST;
constexpr int MsgHeader_TimeStampSyncState_TimeStampSyncState_ARRAYSIZE = MsgHeader_TimeStampSyncState_TimeStampSyncState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgHeader_TimeStampSyncState_descriptor();
template<typename T>
inline const std::string& MsgHeader_TimeStampSyncState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgHeader_TimeStampSyncState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgHeader_TimeStampSyncState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgHeader_TimeStampSyncState_descriptor(), enum_t_value);
}
inline bool MsgHeader_TimeStampSyncState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgHeader_TimeStampSyncState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgHeader_TimeStampSyncState>(
    MsgHeader_TimeStampSyncState_descriptor(), name, value);
}
// ===================================================================

class MsgHeader_Time final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PDK.MsgHeader.Time) */ {
 public:
  inline MsgHeader_Time() : MsgHeader_Time(nullptr) {}
  ~MsgHeader_Time() override;
  explicit PROTOBUF_CONSTEXPR MsgHeader_Time(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgHeader_Time(const MsgHeader_Time& from);
  MsgHeader_Time(MsgHeader_Time&& from) noexcept
    : MsgHeader_Time() {
    *this = ::std::move(from);
  }

  inline MsgHeader_Time& operator=(const MsgHeader_Time& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgHeader_Time& operator=(MsgHeader_Time&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgHeader_Time& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgHeader_Time* internal_default_instance() {
    return reinterpret_cast<const MsgHeader_Time*>(
               &_MsgHeader_Time_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgHeader_Time& a, MsgHeader_Time& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgHeader_Time* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgHeader_Time* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgHeader_Time* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgHeader_Time>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgHeader_Time& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgHeader_Time& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgHeader_Time* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PDK.MsgHeader.Time";
  }
  protected:
  explicit MsgHeader_Time(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUSecFieldNumber = 1,
    kUNsecFieldNumber = 2,
  };
  // optional uint32 u_Sec = 1;
  bool has_u_sec() const;
  private:
  bool _internal_has_u_sec() const;
  public:
  void clear_u_sec();
  uint32_t u_sec() const;
  void set_u_sec(uint32_t value);
  private:
  uint32_t _internal_u_sec() const;
  void _internal_set_u_sec(uint32_t value);
  public:

  // optional uint32 u_Nsec = 2;
  bool has_u_nsec() const;
  private:
  bool _internal_has_u_nsec() const;
  public:
  void clear_u_nsec();
  uint32_t u_nsec() const;
  void set_u_nsec(uint32_t value);
  private:
  uint32_t _internal_u_nsec() const;
  void _internal_set_u_nsec(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.PDK.MsgHeader.Time)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t u_sec_;
  uint32_t u_nsec_;
  friend struct ::TableStruct_pdk_5fMsgHeader_2eproto;
};
// -------------------------------------------------------------------

class MsgHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PDK.MsgHeader) */ {
 public:
  inline MsgHeader() : MsgHeader(nullptr) {}
  ~MsgHeader() override;
  explicit PROTOBUF_CONSTEXPR MsgHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgHeader(const MsgHeader& from);
  MsgHeader(MsgHeader&& from) noexcept
    : MsgHeader() {
    *this = ::std::move(from);
  }

  inline MsgHeader& operator=(const MsgHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgHeader& operator=(MsgHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgHeader* internal_default_instance() {
    return reinterpret_cast<const MsgHeader*>(
               &_MsgHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgHeader& a, MsgHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PDK.MsgHeader";
  }
  protected:
  explicit MsgHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MsgHeader_Time Time;

  typedef MsgHeader_SignalSource SignalSource;
  static constexpr SignalSource UNKNOWN =
    MsgHeader_SignalSource_UNKNOWN;
  static constexpr SignalSource SENSOR =
    MsgHeader_SignalSource_SENSOR;
  static constexpr SignalSource ALGORITHM =
    MsgHeader_SignalSource_ALGORITHM;
  static inline bool SignalSource_IsValid(int value) {
    return MsgHeader_SignalSource_IsValid(value);
  }
  static constexpr SignalSource SignalSource_MIN =
    MsgHeader_SignalSource_SignalSource_MIN;
  static constexpr SignalSource SignalSource_MAX =
    MsgHeader_SignalSource_SignalSource_MAX;
  static constexpr int SignalSource_ARRAYSIZE =
    MsgHeader_SignalSource_SignalSource_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SignalSource_descriptor() {
    return MsgHeader_SignalSource_descriptor();
  }
  template<typename T>
  static inline const std::string& SignalSource_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SignalSource>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SignalSource_Name.");
    return MsgHeader_SignalSource_Name(enum_t_value);
  }
  static inline bool SignalSource_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SignalSource* value) {
    return MsgHeader_SignalSource_Parse(name, value);
  }

  typedef MsgHeader_TimeStampSyncState TimeStampSyncState;
  static constexpr TimeStampSyncState UNKNOWN_SYNC =
    MsgHeader_TimeStampSyncState_UNKNOWN_SYNC;
  static constexpr TimeStampSyncState NOT_SYNCED =
    MsgHeader_TimeStampSyncState_NOT_SYNCED;
  static constexpr TimeStampSyncState SYNCED_PTP =
    MsgHeader_TimeStampSyncState_SYNCED_PTP;
  static constexpr TimeStampSyncState SYNCED_CAN =
    MsgHeader_TimeStampSyncState_SYNCED_CAN;
  static constexpr TimeStampSyncState SYNC_LOST =
    MsgHeader_TimeStampSyncState_SYNC_LOST;
  static inline bool TimeStampSyncState_IsValid(int value) {
    return MsgHeader_TimeStampSyncState_IsValid(value);
  }
  static constexpr TimeStampSyncState TimeStampSyncState_MIN =
    MsgHeader_TimeStampSyncState_TimeStampSyncState_MIN;
  static constexpr TimeStampSyncState TimeStampSyncState_MAX =
    MsgHeader_TimeStampSyncState_TimeStampSyncState_MAX;
  static constexpr int TimeStampSyncState_ARRAYSIZE =
    MsgHeader_TimeStampSyncState_TimeStampSyncState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TimeStampSyncState_descriptor() {
    return MsgHeader_TimeStampSyncState_descriptor();
  }
  template<typename T>
  static inline const std::string& TimeStampSyncState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TimeStampSyncState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TimeStampSyncState_Name.");
    return MsgHeader_TimeStampSyncState_Name(enum_t_value);
  }
  static inline bool TimeStampSyncState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TimeStampSyncState* value) {
    return MsgHeader_TimeStampSyncState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTStampFieldNumber = 2,
    kUSeqFieldNumber = 1,
    kETimestampSyncStateFieldNumber = 4,
    kESignalSourceFieldNumber = 5,
  };
  // optional .pb.PDK.MsgHeader.Time t_Stamp = 2;
  bool has_t_stamp() const;
  private:
  bool _internal_has_t_stamp() const;
  public:
  void clear_t_stamp();
  const ::pb::PDK::MsgHeader_Time& t_stamp() const;
  PROTOBUF_NODISCARD ::pb::PDK::MsgHeader_Time* release_t_stamp();
  ::pb::PDK::MsgHeader_Time* mutable_t_stamp();
  void set_allocated_t_stamp(::pb::PDK::MsgHeader_Time* t_stamp);
  private:
  const ::pb::PDK::MsgHeader_Time& _internal_t_stamp() const;
  ::pb::PDK::MsgHeader_Time* _internal_mutable_t_stamp();
  public:
  void unsafe_arena_set_allocated_t_stamp(
      ::pb::PDK::MsgHeader_Time* t_stamp);
  ::pb::PDK::MsgHeader_Time* unsafe_arena_release_t_stamp();

  // optional uint32 u_Seq = 1;
  bool has_u_seq() const;
  private:
  bool _internal_has_u_seq() const;
  public:
  void clear_u_seq();
  uint32_t u_seq() const;
  void set_u_seq(uint32_t value);
  private:
  uint32_t _internal_u_seq() const;
  void _internal_set_u_seq(uint32_t value);
  public:

  // optional .pb.PDK.MsgHeader.TimeStampSyncState e_Timestamp_sync_state = 4;
  bool has_e_timestamp_sync_state() const;
  private:
  bool _internal_has_e_timestamp_sync_state() const;
  public:
  void clear_e_timestamp_sync_state();
  ::pb::PDK::MsgHeader_TimeStampSyncState e_timestamp_sync_state() const;
  void set_e_timestamp_sync_state(::pb::PDK::MsgHeader_TimeStampSyncState value);
  private:
  ::pb::PDK::MsgHeader_TimeStampSyncState _internal_e_timestamp_sync_state() const;
  void _internal_set_e_timestamp_sync_state(::pb::PDK::MsgHeader_TimeStampSyncState value);
  public:

  // optional .pb.PDK.MsgHeader.SignalSource e_SignalSource = 5;
  bool has_e_signalsource() const;
  private:
  bool _internal_has_e_signalsource() const;
  public:
  void clear_e_signalsource();
  ::pb::PDK::MsgHeader_SignalSource e_signalsource() const;
  void set_e_signalsource(::pb::PDK::MsgHeader_SignalSource value);
  private:
  ::pb::PDK::MsgHeader_SignalSource _internal_e_signalsource() const;
  void _internal_set_e_signalsource(::pb::PDK::MsgHeader_SignalSource value);
  public:

  // @@protoc_insertion_point(class_scope:pb.PDK.MsgHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::PDK::MsgHeader_Time* t_stamp_;
  uint32_t u_seq_;
  int e_timestamp_sync_state_;
  int e_signalsource_;
  friend struct ::TableStruct_pdk_5fMsgHeader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgHeader_Time

// optional uint32 u_Sec = 1;
inline bool MsgHeader_Time::_internal_has_u_sec() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MsgHeader_Time::has_u_sec() const {
  return _internal_has_u_sec();
}
inline void MsgHeader_Time::clear_u_sec() {
  u_sec_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t MsgHeader_Time::_internal_u_sec() const {
  return u_sec_;
}
inline uint32_t MsgHeader_Time::u_sec() const {
  // @@protoc_insertion_point(field_get:pb.PDK.MsgHeader.Time.u_Sec)
  return _internal_u_sec();
}
inline void MsgHeader_Time::_internal_set_u_sec(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  u_sec_ = value;
}
inline void MsgHeader_Time::set_u_sec(uint32_t value) {
  _internal_set_u_sec(value);
  // @@protoc_insertion_point(field_set:pb.PDK.MsgHeader.Time.u_Sec)
}

// optional uint32 u_Nsec = 2;
inline bool MsgHeader_Time::_internal_has_u_nsec() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MsgHeader_Time::has_u_nsec() const {
  return _internal_has_u_nsec();
}
inline void MsgHeader_Time::clear_u_nsec() {
  u_nsec_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t MsgHeader_Time::_internal_u_nsec() const {
  return u_nsec_;
}
inline uint32_t MsgHeader_Time::u_nsec() const {
  // @@protoc_insertion_point(field_get:pb.PDK.MsgHeader.Time.u_Nsec)
  return _internal_u_nsec();
}
inline void MsgHeader_Time::_internal_set_u_nsec(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  u_nsec_ = value;
}
inline void MsgHeader_Time::set_u_nsec(uint32_t value) {
  _internal_set_u_nsec(value);
  // @@protoc_insertion_point(field_set:pb.PDK.MsgHeader.Time.u_Nsec)
}

// -------------------------------------------------------------------

// MsgHeader

// optional uint32 u_Seq = 1;
inline bool MsgHeader::_internal_has_u_seq() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MsgHeader::has_u_seq() const {
  return _internal_has_u_seq();
}
inline void MsgHeader::clear_u_seq() {
  u_seq_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t MsgHeader::_internal_u_seq() const {
  return u_seq_;
}
inline uint32_t MsgHeader::u_seq() const {
  // @@protoc_insertion_point(field_get:pb.PDK.MsgHeader.u_Seq)
  return _internal_u_seq();
}
inline void MsgHeader::_internal_set_u_seq(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  u_seq_ = value;
}
inline void MsgHeader::set_u_seq(uint32_t value) {
  _internal_set_u_seq(value);
  // @@protoc_insertion_point(field_set:pb.PDK.MsgHeader.u_Seq)
}

// optional .pb.PDK.MsgHeader.Time t_Stamp = 2;
inline bool MsgHeader::_internal_has_t_stamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || t_stamp_ != nullptr);
  return value;
}
inline bool MsgHeader::has_t_stamp() const {
  return _internal_has_t_stamp();
}
inline void MsgHeader::clear_t_stamp() {
  if (t_stamp_ != nullptr) t_stamp_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pb::PDK::MsgHeader_Time& MsgHeader::_internal_t_stamp() const {
  const ::pb::PDK::MsgHeader_Time* p = t_stamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::PDK::MsgHeader_Time&>(
      ::pb::PDK::_MsgHeader_Time_default_instance_);
}
inline const ::pb::PDK::MsgHeader_Time& MsgHeader::t_stamp() const {
  // @@protoc_insertion_point(field_get:pb.PDK.MsgHeader.t_Stamp)
  return _internal_t_stamp();
}
inline void MsgHeader::unsafe_arena_set_allocated_t_stamp(
    ::pb::PDK::MsgHeader_Time* t_stamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_stamp_);
  }
  t_stamp_ = t_stamp;
  if (t_stamp) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.PDK.MsgHeader.t_Stamp)
}
inline ::pb::PDK::MsgHeader_Time* MsgHeader::release_t_stamp() {
  _has_bits_[0] &= ~0x00000001u;
  ::pb::PDK::MsgHeader_Time* temp = t_stamp_;
  t_stamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::PDK::MsgHeader_Time* MsgHeader::unsafe_arena_release_t_stamp() {
  // @@protoc_insertion_point(field_release:pb.PDK.MsgHeader.t_Stamp)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::PDK::MsgHeader_Time* temp = t_stamp_;
  t_stamp_ = nullptr;
  return temp;
}
inline ::pb::PDK::MsgHeader_Time* MsgHeader::_internal_mutable_t_stamp() {
  _has_bits_[0] |= 0x00000001u;
  if (t_stamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::PDK::MsgHeader_Time>(GetArenaForAllocation());
    t_stamp_ = p;
  }
  return t_stamp_;
}
inline ::pb::PDK::MsgHeader_Time* MsgHeader::mutable_t_stamp() {
  ::pb::PDK::MsgHeader_Time* _msg = _internal_mutable_t_stamp();
  // @@protoc_insertion_point(field_mutable:pb.PDK.MsgHeader.t_Stamp)
  return _msg;
}
inline void MsgHeader::set_allocated_t_stamp(::pb::PDK::MsgHeader_Time* t_stamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete t_stamp_;
  }
  if (t_stamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(t_stamp);
    if (message_arena != submessage_arena) {
      t_stamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t_stamp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  t_stamp_ = t_stamp;
  // @@protoc_insertion_point(field_set_allocated:pb.PDK.MsgHeader.t_Stamp)
}

// optional .pb.PDK.MsgHeader.TimeStampSyncState e_Timestamp_sync_state = 4;
inline bool MsgHeader::_internal_has_e_timestamp_sync_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MsgHeader::has_e_timestamp_sync_state() const {
  return _internal_has_e_timestamp_sync_state();
}
inline void MsgHeader::clear_e_timestamp_sync_state() {
  e_timestamp_sync_state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::pb::PDK::MsgHeader_TimeStampSyncState MsgHeader::_internal_e_timestamp_sync_state() const {
  return static_cast< ::pb::PDK::MsgHeader_TimeStampSyncState >(e_timestamp_sync_state_);
}
inline ::pb::PDK::MsgHeader_TimeStampSyncState MsgHeader::e_timestamp_sync_state() const {
  // @@protoc_insertion_point(field_get:pb.PDK.MsgHeader.e_Timestamp_sync_state)
  return _internal_e_timestamp_sync_state();
}
inline void MsgHeader::_internal_set_e_timestamp_sync_state(::pb::PDK::MsgHeader_TimeStampSyncState value) {
  assert(::pb::PDK::MsgHeader_TimeStampSyncState_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  e_timestamp_sync_state_ = value;
}
inline void MsgHeader::set_e_timestamp_sync_state(::pb::PDK::MsgHeader_TimeStampSyncState value) {
  _internal_set_e_timestamp_sync_state(value);
  // @@protoc_insertion_point(field_set:pb.PDK.MsgHeader.e_Timestamp_sync_state)
}

// optional .pb.PDK.MsgHeader.SignalSource e_SignalSource = 5;
inline bool MsgHeader::_internal_has_e_signalsource() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MsgHeader::has_e_signalsource() const {
  return _internal_has_e_signalsource();
}
inline void MsgHeader::clear_e_signalsource() {
  e_signalsource_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::pb::PDK::MsgHeader_SignalSource MsgHeader::_internal_e_signalsource() const {
  return static_cast< ::pb::PDK::MsgHeader_SignalSource >(e_signalsource_);
}
inline ::pb::PDK::MsgHeader_SignalSource MsgHeader::e_signalsource() const {
  // @@protoc_insertion_point(field_get:pb.PDK.MsgHeader.e_SignalSource)
  return _internal_e_signalsource();
}
inline void MsgHeader::_internal_set_e_signalsource(::pb::PDK::MsgHeader_SignalSource value) {
  assert(::pb::PDK::MsgHeader_SignalSource_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  e_signalsource_ = value;
}
inline void MsgHeader::set_e_signalsource(::pb::PDK::MsgHeader_SignalSource value) {
  _internal_set_e_signalsource(value);
  // @@protoc_insertion_point(field_set:pb.PDK.MsgHeader.e_SignalSource)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PDK
}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::PDK::MsgHeader_SignalSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PDK::MsgHeader_SignalSource>() {
  return ::pb::PDK::MsgHeader_SignalSource_descriptor();
}
template <> struct is_proto_enum< ::pb::PDK::MsgHeader_TimeStampSyncState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PDK::MsgHeader_TimeStampSyncState>() {
  return ::pb::PDK::MsgHeader_TimeStampSyncState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pdk_5fMsgHeader_2eproto
