// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdk_SensorMsgHeader.proto

#include "pdk_SensorMsgHeader.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pb {
namespace PDK {
PROTOBUF_CONSTEXPR SensorMsgHeader::SensorMsgHeader(
    ::_pbi::ConstantInitialized)
  : t_commonheader_(nullptr)
  , u_sensorid_(0u)
  , e_signalstatus_(2)

  , e_sensortype_(99)
{}
struct SensorMsgHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorMsgHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorMsgHeaderDefaultTypeInternal() {}
  union {
    SensorMsgHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorMsgHeaderDefaultTypeInternal _SensorMsgHeader_default_instance_;
}  // namespace PDK
}  // namespace pb
static ::_pb::Metadata file_level_metadata_pdk_5fSensorMsgHeader_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_pdk_5fSensorMsgHeader_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_pdk_5fSensorMsgHeader_2eproto = nullptr;

const uint32_t TableStruct_pdk_5fSensorMsgHeader_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::PDK::SensorMsgHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::SensorMsgHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::PDK::SensorMsgHeader, t_commonheader_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::SensorMsgHeader, u_sensorid_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::SensorMsgHeader, e_signalstatus_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::SensorMsgHeader, e_sensortype_),
  0,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::pb::PDK::SensorMsgHeader)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pb::PDK::_SensorMsgHeader_default_instance_._instance,
};

const char descriptor_table_protodef_pdk_5fSensorMsgHeader_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031pdk_SensorMsgHeader.proto\022\006pb.PDK\032\023pdk"
  "_MsgHeader.proto\"\250\003\n\017SensorMsgHeader\022)\n\016"
  "t_CommonHeader\030\001 \001(\0132\021.pb.PDK.MsgHeader\022"
  "\022\n\nu_SensorId\030\002 \001(\r\022Q\n\016e_SignalStatus\030\003 "
  "\001(\0162$.pb.PDK.SensorMsgHeader.SignalStatu"
  "s:\023EM_SIGSTATE_INVALID\022A\n\014e_SensorType\030\004"
  " \001(\0162\".pb.PDK.SensorMsgHeader.SensorType"
  ":\007UNKNOWN\"Q\n\014SignalStatus\022\024\n\020EM_SIGSTATE"
  "_INIT\020\000\022\022\n\016EM_SIGSTATE_OK\020\001\022\027\n\023EM_SIGSTA"
  "TE_INVALID\020\002\"m\n\nSensorType\022\014\n\010ARS430EO\020\000"
  "\022\014\n\010ARS430DI\020\001\022\014\n\010SRR520CO\020\003\022\016\n\nARS540DE"
  "MO\020\004\022\014\n\010SRR520DI\020\005\022\n\n\006ARS548\020\006\022\013\n\007UNKNOW"
  "N\020c"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_pdk_5fSensorMsgHeader_2eproto_deps[1] = {
  &::descriptor_table_pdk_5fMsgHeader_2eproto,
};
static ::_pbi::once_flag descriptor_table_pdk_5fSensorMsgHeader_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_pdk_5fSensorMsgHeader_2eproto = {
    false, false, 483, descriptor_table_protodef_pdk_5fSensorMsgHeader_2eproto,
    "pdk_SensorMsgHeader.proto",
    &descriptor_table_pdk_5fSensorMsgHeader_2eproto_once, descriptor_table_pdk_5fSensorMsgHeader_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_pdk_5fSensorMsgHeader_2eproto::offsets,
    file_level_metadata_pdk_5fSensorMsgHeader_2eproto, file_level_enum_descriptors_pdk_5fSensorMsgHeader_2eproto,
    file_level_service_descriptors_pdk_5fSensorMsgHeader_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_pdk_5fSensorMsgHeader_2eproto_getter() {
  return &descriptor_table_pdk_5fSensorMsgHeader_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_pdk_5fSensorMsgHeader_2eproto(&descriptor_table_pdk_5fSensorMsgHeader_2eproto);
namespace pb {
namespace PDK {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorMsgHeader_SignalStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pdk_5fSensorMsgHeader_2eproto);
  return file_level_enum_descriptors_pdk_5fSensorMsgHeader_2eproto[0];
}
bool SensorMsgHeader_SignalStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SensorMsgHeader_SignalStatus SensorMsgHeader::EM_SIGSTATE_INIT;
constexpr SensorMsgHeader_SignalStatus SensorMsgHeader::EM_SIGSTATE_OK;
constexpr SensorMsgHeader_SignalStatus SensorMsgHeader::EM_SIGSTATE_INVALID;
constexpr SensorMsgHeader_SignalStatus SensorMsgHeader::SignalStatus_MIN;
constexpr SensorMsgHeader_SignalStatus SensorMsgHeader::SignalStatus_MAX;
constexpr int SensorMsgHeader::SignalStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorMsgHeader_SensorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pdk_5fSensorMsgHeader_2eproto);
  return file_level_enum_descriptors_pdk_5fSensorMsgHeader_2eproto[1];
}
bool SensorMsgHeader_SensorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 99:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SensorMsgHeader_SensorType SensorMsgHeader::ARS430EO;
constexpr SensorMsgHeader_SensorType SensorMsgHeader::ARS430DI;
constexpr SensorMsgHeader_SensorType SensorMsgHeader::SRR520CO;
constexpr SensorMsgHeader_SensorType SensorMsgHeader::ARS540DEMO;
constexpr SensorMsgHeader_SensorType SensorMsgHeader::SRR520DI;
constexpr SensorMsgHeader_SensorType SensorMsgHeader::ARS548;
constexpr SensorMsgHeader_SensorType SensorMsgHeader::UNKNOWN;
constexpr SensorMsgHeader_SensorType SensorMsgHeader::SensorType_MIN;
constexpr SensorMsgHeader_SensorType SensorMsgHeader::SensorType_MAX;
constexpr int SensorMsgHeader::SensorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SensorMsgHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorMsgHeader>()._has_bits_);
  static const ::pb::PDK::MsgHeader& t_commonheader(const SensorMsgHeader* msg);
  static void set_has_t_commonheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_u_sensorid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_e_signalstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_e_sensortype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::pb::PDK::MsgHeader&
SensorMsgHeader::_Internal::t_commonheader(const SensorMsgHeader* msg) {
  return *msg->t_commonheader_;
}
void SensorMsgHeader::clear_t_commonheader() {
  if (t_commonheader_ != nullptr) t_commonheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SensorMsgHeader::SensorMsgHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb.PDK.SensorMsgHeader)
}
SensorMsgHeader::SensorMsgHeader(const SensorMsgHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_t_commonheader()) {
    t_commonheader_ = new ::pb::PDK::MsgHeader(*from.t_commonheader_);
  } else {
    t_commonheader_ = nullptr;
  }
  ::memcpy(&u_sensorid_, &from.u_sensorid_,
    static_cast<size_t>(reinterpret_cast<char*>(&e_sensortype_) -
    reinterpret_cast<char*>(&u_sensorid_)) + sizeof(e_sensortype_));
  // @@protoc_insertion_point(copy_constructor:pb.PDK.SensorMsgHeader)
}

inline void SensorMsgHeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&t_commonheader_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&u_sensorid_) -
    reinterpret_cast<char*>(&t_commonheader_)) + sizeof(u_sensorid_));
e_signalstatus_ = 2;
e_sensortype_ = 99;
}

SensorMsgHeader::~SensorMsgHeader() {
  // @@protoc_insertion_point(destructor:pb.PDK.SensorMsgHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorMsgHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete t_commonheader_;
}

void SensorMsgHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SensorMsgHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PDK.SensorMsgHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(t_commonheader_ != nullptr);
    t_commonheader_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    u_sensorid_ = 0u;
    e_signalstatus_ = 2;
    e_sensortype_ = 99;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorMsgHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pb.PDK.MsgHeader t_CommonHeader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_commonheader(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 u_SensorId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_u_sensorid(&has_bits);
          u_sensorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pb.PDK.SensorMsgHeader.SignalStatus e_SignalStatus = 3 [default = EM_SIGSTATE_INVALID];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::PDK::SensorMsgHeader_SignalStatus_IsValid(val))) {
            _internal_set_e_signalstatus(static_cast<::pb::PDK::SensorMsgHeader_SignalStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .pb.PDK.SensorMsgHeader.SensorType e_SensorType = 4 [default = UNKNOWN];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::PDK::SensorMsgHeader_SensorType_IsValid(val))) {
            _internal_set_e_sensortype(static_cast<::pb::PDK::SensorMsgHeader_SensorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorMsgHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PDK.SensorMsgHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.PDK.MsgHeader t_CommonHeader = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::t_commonheader(this),
        _Internal::t_commonheader(this).GetCachedSize(), target, stream);
  }

  // optional uint32 u_SensorId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_u_sensorid(), target);
  }

  // optional .pb.PDK.SensorMsgHeader.SignalStatus e_SignalStatus = 3 [default = EM_SIGSTATE_INVALID];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_e_signalstatus(), target);
  }

  // optional .pb.PDK.SensorMsgHeader.SensorType e_SensorType = 4 [default = UNKNOWN];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_e_sensortype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PDK.SensorMsgHeader)
  return target;
}

size_t SensorMsgHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PDK.SensorMsgHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .pb.PDK.MsgHeader t_CommonHeader = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_commonheader_);
    }

    // optional uint32 u_SensorId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_u_sensorid());
    }

    // optional .pb.PDK.SensorMsgHeader.SignalStatus e_SignalStatus = 3 [default = EM_SIGSTATE_INVALID];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_e_signalstatus());
    }

    // optional .pb.PDK.SensorMsgHeader.SensorType e_SensorType = 4 [default = UNKNOWN];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_e_sensortype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorMsgHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SensorMsgHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorMsgHeader::GetClassData() const { return &_class_data_; }

void SensorMsgHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SensorMsgHeader *>(to)->MergeFrom(
      static_cast<const SensorMsgHeader &>(from));
}


void SensorMsgHeader::MergeFrom(const SensorMsgHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PDK.SensorMsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_t_commonheader()->::pb::PDK::MsgHeader::MergeFrom(from._internal_t_commonheader());
    }
    if (cached_has_bits & 0x00000002u) {
      u_sensorid_ = from.u_sensorid_;
    }
    if (cached_has_bits & 0x00000004u) {
      e_signalstatus_ = from.e_signalstatus_;
    }
    if (cached_has_bits & 0x00000008u) {
      e_sensortype_ = from.e_sensortype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorMsgHeader::CopyFrom(const SensorMsgHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PDK.SensorMsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMsgHeader::IsInitialized() const {
  return true;
}

void SensorMsgHeader::InternalSwap(SensorMsgHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorMsgHeader, u_sensorid_)
      + sizeof(SensorMsgHeader::u_sensorid_)
      - PROTOBUF_FIELD_OFFSET(SensorMsgHeader, t_commonheader_)>(
          reinterpret_cast<char*>(&t_commonheader_),
          reinterpret_cast<char*>(&other->t_commonheader_));
  swap(e_signalstatus_, other->e_signalstatus_);
  swap(e_sensortype_, other->e_sensortype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorMsgHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pdk_5fSensorMsgHeader_2eproto_getter, &descriptor_table_pdk_5fSensorMsgHeader_2eproto_once,
      file_level_metadata_pdk_5fSensorMsgHeader_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PDK
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::PDK::SensorMsgHeader*
Arena::CreateMaybeMessage< ::pb::PDK::SensorMsgHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::PDK::SensorMsgHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
